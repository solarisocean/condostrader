<?php

/**
 * Implements hook_permission().
 * @return array
 */
function drealty_import_permission() {
  return array(
    'access drealty import' => array(
      'title' => t('Access Drealty Import'),
      'description' => t('Allows the user to execute drealty import.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function drealty_import_menu() {
  $items = array();

  $items['admin/drealty/drealty-import'] = array(
    'title' => 'Drealty Import',
    'description' => 'Perform first-time imports or system flushing.',
    'access callback' => 'user_access',
    'access arguments' => array('access drealty import'),
    'page callback' => 'drealty_import_admin_menu_block_page',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/drealty/drealty-import/config'] = array(
    'title' => 'Configuration settings',
    'description' => 'Adjust settings for importing.',
    'access callback' => 'user_access',
    'access arguments' => array('access drealty import'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drealty_import_admin_settings_form'),
    'file' => 'includes/admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/drealty/drealty-import/full-import'] = array(
    'title' => 'Full Import',
    'description' => 'Queue all available items based on drealty configuration to be imported.',
    'access callback' => 'user_access',
    'access arguments' => array('access drealty import'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drealty_import_full_import_form'),
    'file' => 'includes/full.batch.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/drealty/drealty-import/flush'] = array(
    'title' => 'Flush Data',
    'description' => 'Flush drealty listing data.',
    'access callback' => 'user_access',
    'access arguments' => array('access drealty import'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drealty_import_flush_form'),
    'file' => 'includes/flush.batch.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/drealty/drealty-import/process'] = array(
    'title' => 'Process queue',
    'description' => 'Manually process any drealty items in the queue.',
    'access callback' => 'user_access',
    'access arguments' => array('access drealty import'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drealty_import_process_queue_form'),
    'file' => 'includes/process.batch.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  if (module_exists('drealty_office')) {
    $items['admin/drealty/drealty-import/office-import'] = array(
      'title' => 'Office Import',
      'description' => 'Queue all available office items based on drealty configuration to be imported.',
      'access callback' => 'user_access',
      'access arguments' => array('access drealty import'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('drealty_import_office_import_form'),
      'file' => 'includes/office.batch.inc',
      'type' => MENU_NORMAL_ITEM,
    );
  }

  if (module_exists('drealty_agent')) {
    $items['admin/drealty/drealty-import/agent-import'] = array(
      'title' => 'Agent Import',
      'description' => 'Queue all available agents based on drealty configuration to be imported.',
      'access callback' => 'user_access',
      'access arguments' => array('access drealty import'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('drealty_import_agent_import_form'),
      'file' => 'includes/agent.batch.inc',
      'type' => MENU_NORMAL_ITEM,
    );
  }

  if (module_exists('drealty_openhouse')) {
    $items['admin/drealty/drealty-import/openhouse-import'] = array(
      'title' => 'OpenHouse Import',
      'description' => 'Queue all available OpenHouse data based on drealty configuration to be imported.',
      'access callback' => 'user_access',
      'access arguments' => array('access drealty import'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('drealty_import_openhouse_import_form'),
      'file' => 'includes/openhouse.batch.inc',
      'type' => MENU_NORMAL_ITEM,
    );
  }

  return $items;
}

/**
 * Page callback from hook_menu.
 * @return null|string
 * @throws Exception
 */
function drealty_import_admin_menu_block_page() {
  $item = menu_get_item();
  if ($content = system_admin_menu_block($item)) {
    $output = theme('admin_block_content', array('content' => $content));
  } else {
    $output = t('You do not have any administrative items.');
  }
  return $output;
}

/**
 * Implements hook_cron().
 * Loops through all active connections, resources, and enabled classes, queries for changes in the feed from a limited timeframe.
 */
function drealty_import_cron() {
  // look for updated listings per connection
  $dc = new drealtyConnection();
  $metadata = new drealtyMetaData();
  $connections = $dc->FetchConfiguredConnections();
  $items = array();
  $import = new DrealtyImport();

  foreach ($connections as $connection) {
    if ($connection->active == 1 && $dc->connect($connection->conid)) {
      $mappings = $connection->ResourceMappings();

      foreach ($mappings as $mapping) {
        $resource = $metadata->FetchResource($mapping->rid);
        $classes = $connection->FetchClasses($resource);
        foreach ($classes as $key => $class) {
          if ($class->enabled) {
            $field_mappings = $connection->FetchFieldMappings($resource, $class);
            $key_field = $field_mappings['rets_key']->systemname;
            $fields = $import->get_fields($connection->conid, $class->cid);

            $params = array(
              'Format' => 'COMPACT-DECODED',
              'RestrictedIndicator' => 'xxxx',
              'Count' => '0',
              'Select' => $fields,
            );

            switch ($class->systemname) {
              case 'Property':
                $entity_type = 'drealty_listing';
                break;
              case 'Agent':
                $entity_type = 'drealty_agent';
                break;
              case 'Office':
                $entity_type = 'drealty_office';
                break;
              default:
                $entity_type = 'drealty_listing';
                break;
            }

            if(in_array($class->query_type, array(0,2))) {
              $orig_query = $class->override_status_query_text;
              $dc->rets->SetParam("offset_support", TRUE);
            }

            $date = format_date(strtotime('-' . variable_get('drealty_import_modified_span', 3) . ' days'), 'custom', 'Y-m-d');
            $pointer = $dc->rets->SearchQuery($resource->systemname, $class->systemname, '(ModificationTimestamp=' . $date .'\T00:00:00+)', $params);

            // loop through the results
            // check hash values, class lifetime
            if ($dc->rets->NumRows() > 0) {
              while ($item = $dc->rets->FetchRow($pointer)) {
                $add = FALSE;
                $hash = $import->calculate_hash($item, $connection, $class);
                $listing = NULL;

                if (!($listing = $import->entityExists($entity_type, $item[$resource->keyfield]))) {
                  $add = TRUE;
                }

                try {
                  if (isset($listing) && $listing) {
                    $key = array_keys($listing);
                    $id = end($key);
                    $wrapper = entity_metadata_wrapper($entity_type, $id);
                    if ($wrapper && isset($wrapper->hash) && $wrapper->hash->value() != $hash) {
                      $add = TRUE;
                    }
                  }

                  if ($add) {
                    $item = array(
                      'resource' => $resource,
                      'connection' => $connection,
                      'class' => $class,
                      'result' => $item,
                      'remote_id' => $item[$resource->keyfield],
                      'entity_type' => $entity_type,
                    );
                    $import->queue->createItem($item);
                  }
                } catch (Exception $e) {
                  watchdog("drealty_import_cron", $e->getMessage(), array(), WATCHDOG_ERROR);
                  drupal_set_message($e->getMessage(), 'error');
                }
              }
            }

            // free pointer
            $dc->rets->FreeResult($pointer);
          }
        }
      }
    }
  }

  $dc->disconnect();
}

/**
 * Implements hook_cron_queue_info().
 */
function drealty_import_cron_queue_info() {
  $queues = array();

  $queues['drealty_import'] = array(
    'worker callback' => 'drealty_import_process_item',
  );

  return $queues;
}

function drealty_import_process_item($item) {
  $import = new DrealtyImport();
  $import->processQueueItem($item);
}