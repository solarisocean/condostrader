<?php


/**
 * Implements hook_module_implements_alter()
 *
 * In this case needs for set ctrader_register form_alter after all others form_alters.
 */
function ctrader_register_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    // Move our hook implementation to the bottom.
    if (isset($implementations['ctrader_register'])) {
      $group = $implementations['ctrader_register'];
      unset($implementations['ctrader_register']);
      $implementations['ctrader_register'] = $group;
    }
  }
}


/**
 * Implements hook_init().
 */
function ctrader_register_init() {
  $path = $_GET['q'];
  if (strpos($path, 'user/register') !== FALSE) {
    drupal_add_css(drupal_get_path('module', 'ctrader_register') . '/css/ctrader-register.css');
    _ctrader_map_prepare_neighbourhoods_json();
  }
}


/**
 * Implements hook_menu().
 */
function ctrader_register_menu() {
  $items = array();
  $items['js-singup-map'] = array(
    'title' => 'Search link calculating page',
    'page callback' => '_js_singup_map_page_callback',
    'access callback' => TRUE,
    'delivery callback' => 'drupal_json_output',
  );
  return $items;
}


/**
 * Implements hook_form_FORM_ID_alter() for the registration form.
 */
function ctrader_register_form_user_register_form_alter(&$form, &$form_state) {
  $form['#attached']['js'][] = drupal_get_path('module', 'ctrader_register') . '/js/ctrader-register.js';

  $form['#attached']['js'][] = libraries_get_path('leaflet') . '/leaflet-src.js';
  $form['#attached']['css'][] = libraries_get_path('leaflet') . '/leaflet.css';

  $form['#attached']['js'][] = libraries_get_path('Leaflet.draw') . '/dist/leaflet.draw.js';
  $form['#attached']['css'][] = libraries_get_path('Leaflet.draw') . '/dist/leaflet.draw.css';

  $form['#attached']['js'][] = libraries_get_path('leaflet_markercluster') . '/dist/leaflet.markercluster.js';
  $form['#attached']['css'][] = libraries_get_path('leaflet_markercluster') . '/dist//dist/MarkerCluster.css';
  $form['#attached']['css'][] = libraries_get_path('leaflet_markercluster') . '/dist/MarkerCluster.Default.css';

  $form['account']['mail']['#title'] = t('E-mail address');
  $form['field_looking_to'][LANGUAGE_NONE]['#options']['_none'] = t('Choose @dots', array('@dots' => '...'));
  $form['field_mobile_phone_number'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('example: @number', array('@number' => '555-777-9999'));
  $form['actions']['submit']['#value'] = t('Sign up');
  unset($form['account']['mail']['#description']);
  unset($form['account']['pass']['#description']);
  $form['form_map'] = array(
    '#type' => 'item',
    '#markup' => '<div id="mapid"></div>',
    '#weight' => 1,
  );

  $form['#prefix'] = $form['field_form_title'][LANGUAGE_NONE][0]['markup']['#markup'];
  unset($form['field_form_title']);

  //Have created left and right containersto reaarange form items.
  $form['sign_up_right'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'sign_up_right',
      ),
    ),
  );

  // Unset field_mobile_phone_number placeholder.
  unset($form['field_mobile_phone_number'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder']);

  //Have added iems to containers.
  $form['sign_up_right']['user_region'] = $form['field_user_region'];
  $form['sign_up_right']['user_region']['#weight'] = 10;
  $form['sign_up_right']['user_map'] = $form['form_map'];
  $form['sign_up_right']['user_map']['#weight'] = 20;

  //Unset old items.
  unset($form['field_user_region']);
  unset($form['form_map']);
}

/**
 * Implement hook_field_group_build_pre_render_alter.
 */
function ctrader_register_field_group_build_pre_render_alter(&$element) {
  //Rewrite register form.
  if (isset($element['group_sign_up_left'])) {
    $element['group_sign_up_left']['terms_of_use'] = $element['terms_of_use'];
    $element['group_sign_up_left']['terms_of_use']['#weight'] = 30;
    $element['group_sign_up_left']['actions'] = $element['actions'];
    $element['form_build_id']['#weight'] = 50;
    $element['form_id']['#weight'] = 60;

    unset($element['actions']);
    unset($element['terms_of_use']);
  }
}


/**
 * Implements hook_element_info_alter().
 *
 *
 * Disable password strength checker.
 * Disable Drupal's built in password strength checker on the user
 * registration and user edit forms. Coder originally taken from
 * http://www.drupalcoder.com/story/409-disabling-password-check-in-drupal-6
 * https://www.drupal.org/project/disablepwstrength
 *
 */
function ctrader_register_element_info_alter(&$types) {
  if (isset($types['password_confirm']['#process']) && (($position = array_search('user_form_process_password_confirm', $types['password_confirm']['#process'])) !== FALSE)) {
    unset($types['password_confirm']['#process'][$position]);
  }
}


/**
 * Page callback function.
 * @see
 * @return null|void
 */
function _js_singup_map_page_callback() {
  $all_neighbourhoods_json = _ctrader_map_prepare_neighbourhoods_json();
  $vocabulary_machine_name = 'neighbourhoods';
  $vid = taxonomy_vocabulary_machine_name_load($vocabulary_machine_name); //Neighbourhoods vocabulary.
  $vid = $vid->vid;

  // Sends polygons to user registration map.
  if (isset($_POST['signUpLoc'])) {
    $found_polygon = FALSE;
    foreach ($all_neighbourhoods_json as $key => $value) {
      if ($value['id'] == $_POST['signUpLoc']) {
        drupal_json_output($value);
        $found_polygon = TRUE;
      }
      $all_neighbourhoods_json_short[$key] = $value['id'];
    }

    $all_neighbourhoods_json_short_flip = array_flip($all_neighbourhoods_json_short);
    if (!$found_polygon) {
      $children_terms = taxonomy_get_tree($vid, $_POST['signUpLoc'], NULL, FALSE);
      $get_all_children_polygons = array();
      foreach ($children_terms as $value) {
        if (in_array($value->tid, $all_neighbourhoods_json_short)) {
          $all_neighbourhoods_json_key = $all_neighbourhoods_json_short_flip[$value->tid];
          $get_all_children_polygons[] = $all_neighbourhoods_json[$all_neighbourhoods_json_key];
        }
      }
      drupal_json_output($get_all_children_polygons);
    }
  }


  // Sends polygons to search-results map.
  if (isset($_POST['locationSelect'])) {
    $found_polygon = FALSE;
    foreach ($all_neighbourhoods_json as $key => $value) {
      if ($value['id'] == $_POST['locationSelect']) {
        drupal_json_output($value);
        $found_polygon = TRUE;
      }
      $all_neighbourhoods_json_short[$key] = $value['id'];
    }
    $all_neighbourhoods_json_short_flip = array_flip($all_neighbourhoods_json_short);
    if (!$found_polygon) {
      $children_terms = taxonomy_get_tree($vid, $_POST['locationSelect'], NULL, FALSE);
      $get_all_children_polygons = array();
      foreach ($children_terms as $value) {
        if (in_array($value->tid, $all_neighbourhoods_json_short)) {
          $all_neighbourhoods_json_key = $all_neighbourhoods_json_short_flip[$value->tid];
          $get_all_children_polygons[] = $all_neighbourhoods_json[$all_neighbourhoods_json_key];
        }
      }
      drupal_add_js(array('locationSelect' => $get_all_children_polygons), 'setting');
      drupal_json_output($get_all_children_polygons);
    }
  }




//  $all_neighbourhoods_json = _ctrader_map_prepare_neighbourhoods_json();
//
//  if (isset($_POST['signUpLoc'])) {
//    foreach ($all_neighbourhoods_json as $value) {
//      if ($value['id'] == $_POST['signUpLoc']) {
//        drupal_json_output($value);
//      }
//    }
//  }
//
//  if (isset($_POST['locationSelect'])) {
//    $results_map_polygons = array();
//    $location_select_polygon = array();
//    foreach ($all_neighbourhoods_json as $value) {
//      if ($value['properties']['parent_id'] == $_POST['locationSelect']) {
//        $results_map_polygons[] = $value;
//      }
//      if ($value['id'] == $_POST['locationSelect']) {
//        $location_select_polygon = $value;
//      }
//    }
//    if (!$results_map_polygons) {
//      $results_map_polygons[] = $location_select_polygon;
//    }
//    drupal_add_js(array('locationSelect' => $results_map_polygons), 'setting');
//    drupal_json_output($results_map_polygons);
//  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ctrader_register_form_user_login_alter(&$form, &$form_state, $form_id) {
  $form['#prefix'] = '<div class="register-form-title">
    <h1 style="text-align:center;text-transform: uppercase;"><strong>Log In</strong></h1>
    </div>';

  $form['reset_pas_link'] = array(
    '#type' => 'item',
    '#markup' => l(t('Reset password'), 'user/password'),
  );

  $form['#pre_render'][] = 'ctrader_map_user_form_pre_render';
//  drupal_set_message('<pre>' . print_r($form, 1) . '</pre>');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ctrader_register_form_user_pass_alter(&$form, &$form_state, $form_id) {
  $form['#prefix'] = '<div class="register-form-title">
    <h1 style="text-align:center;text-transform: uppercase;"><strong>User password reset</strong></h1>
    <p style="text-align:center">Please enter your e-mail address associated with your account. Password reset instructions will be e-mailed to you right away.</p>
    </div>';
}

/**
 * Prerender function for correct user login form.
 * @param $form
 * @return mixed
 */
function ctrader_map_user_form_pre_render($form) {
  $form['name']['#description'] = '';
  $form['pass']['#description'] = '';

  return $form;
}

