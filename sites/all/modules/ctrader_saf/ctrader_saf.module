<?php


/**
 * Implements hook_init().
 */
function ctrader_saf_init() {

}


/**
 * Implements hook_js_alter().
 */
function ctrader_saf_js_alter(&$javascript) {
  $current_path = current_path();
  if ($current_path == 'main-page' || $current_path == '' || $current_path == 'results') {
    if (isset($javascript['sites/all/modules/facetapi/facetapi.js']) && isset($javascript['sites/all/modules/ctrader_saf/js/rewritten_search_api_ranges.js'])) {
      unset($javascript['sites/all/modules/facetapi/facetapi.js']);
    }
  }
}


/**
 * Implements hook_menu().
 */
function ctrader_saf_menu() {
  $items = array();
  $items['search-link-calculate'] = array(
    'title' => 'Search link calculating page',
    'page callback' => '_ctrader_saf_search_link_calculate_page_callback',
    'access callback' => TRUE,
  );
  return $items;
}


/**
 * Implements hook_form_alter().
 */
function ctrader_saf_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && $form['#id'] == 'views-exposed-form-condo-search-page-block-1') {
    $form['sort_bef_combine']['#default_value'] = '';
  }
  if ($form_id == 'search_api_ranges_block_slider_view_form_field_sqft_range_max__torcond') {
//    $form['range-min']['#value'] = 0;
//    $form_state['build_info']['args'][0]['min'] = 0;
  }
  if ($form_id == 'search_api_ranges_block_slider_view_form_field_lp_dol__torcond' || $form_id == 'search_api_ranges_block_slider_view_form_field_sqft_range_max__torcond') {
    $form['#submit'] = array();
    $form['submit']['#ajax'] = array(
      'callback' => '_ctrader_saf_range_ajax_form_submit',
      'effect' => 'fade',
    );
    foreach ($form['#attached']['js'] as $key => $value) {
      if (is_string($value) && strpos($value, '/search_api_ranges/search_api_ranges.js')) {
        $form['#attached']['js'][$key] = drupal_get_path('module', 'ctrader_saf') . '/js/rewritten_search_api_ranges.js';
      }
    }
  }
}


/**
 * Rewrites default submit function for facet range form (field_lp_dol__torcond).
 *
 * @param $form
 * @param $form_state
 */
function _ctrader_saf_range_ajax_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $range_field = $form_state['input']['range-field'];

  // Prepare params and existing filter $pos (if any)
  $params = drupal_get_query_parameters($_GET, array('q', 'page'));

  // Get pretty path path and goto()
  if (drupal_multilingual() && variable_get('locale_language_negotiation_url_part') == LOCALE_LANGUAGE_NEGOTIATION_URL_PREFIX) {
    list($language, $path) = language_url_split_prefix(request_path(), language_list());
    $language = $language ? $language : NULL;
  }
  else {
    $path = request_path();
    $language = NULL;
  }
  if (module_exists('facetapi_pretty_paths')) {
    $exists = FALSE;
    $split_path = explode('/', $path);
    foreach ($split_path as $key => $value) {
      if ($value == $range_field) {
        $exists = $split_path[$key + 1];
      }
    }

    // Decision: replace existing range or add new
    $new_range = '[' . $values['range-from'] . ' TO ' . $values['range-to'] . ']';
    if ($exists) {
      $path = str_replace($exists, $new_range, $path);
    }
    else {
      $path .= '/' . $range_field . '/' . $new_range;
    }

    // Unset non-pretty query
    unset($params['f']);
  }
  else {
    // Not pretty path logic
    $query = $range_field . ':' . '[' . $values['range-from'] . ' TO ' . $values['range-to'] . ']';

    $pos = -1;
    if (isset($params['f'])) {
      foreach ($params['f'] as $key => $param) {
        if (strpos($param, $range_field . ':') !== FALSE) {
          $pos = $key;
        }
      }
    }

    if ($pos != -1) {
      $params['f'][$pos] = $query;
    }
    else {
      $params['f'][] = $query;
    }
  }


  /******************** added code *****************************/
  if (isset($_SESSION['search_link_calculate']['f'])) {
    $not_in_search_query = TRUE;
    foreach ($_SESSION['search_link_calculate']['f'] as $key => $value) {
      if (strpos($value, $range_field) !== FALSE) {
        $_SESSION['search_link_calculate']['f'][$key] = $query;
        $not_in_search_query = FALSE;
      }
    }
    if ($not_in_search_query) {
      $_SESSION['search_link_calculate']['f'][] = $query;
    }
  }
  else {
    $_SESSION['search_link_calculate']['f'][] = $query;
  }
}


/**
 * Implements hook_search_api_ranges_minmax_alter().
 */
function ctrader_saf_search_api_ranges_minmax_alter(&$variables, &$order) {
  if ($variables['range_field'] == 'field_sqft_range_max__torcond') {

  }
}


/**
 * Implements hook_entity_presave().
 */
function ctrader_saf_entity_presave($entity, $type) {
  switch ($type) {
    case DREALTY_ENTITY_TYPE:
      $sqft_min = $sqft_max = 0;
      if (isset($entity->field_sqft__torcond[LANGUAGE_NONE][0]['value'])) {
        $sqft = $entity->field_sqft__torcond[LANGUAGE_NONE][0]['value'];
        if (strrpos($sqft, '-')) {
          $sqft = explode('-', $sqft);
          $sqft_min = intval($sqft[0]);
          $sqft_max = intval($sqft[1]);
        }
        else {
          $sqft_min = $sqft_max = intval($sqft);
        }
      }
      $entity->field_sqft_range_min__torcond[LANGUAGE_NONE][0]['value'] = $sqft_min;
      $entity->field_sqft_range_max__torcond[LANGUAGE_NONE][0]['value'] = $sqft_max;

      $price = isset($entity->field_lp_dol__torcond[LANGUAGE_NONE][0]['value']) ? intval($entity->field_lp_dol__torcond[LANGUAGE_NONE][0]['value']) : 0;
      $entity->field_price_per_sqft__torcond[LANGUAGE_NONE][0]['value'] = $sqft_max != 0 ? round(($price / $sqft_min), 2) : 0;
      break;
  }
}


/**
 * Implements hook_search_api_solr_query_alter().
 */
function ctrader_saf_search_api_solr_query_alter(array &$call_args, SearchApiQueryInterface $query) {
  $facet_item = $query->getFilter()->getFilters();
  foreach ($facet_item as $item) {
    if (is_object($item) && is_object(reset($item->getFilters()))) {
      $filters = $item->getFilters()[0]->getFilters();

      // Changes query for range facet (field: sqft).
      // Makes one range form for two fields.
      $sqft_rage_field_name = 'field_sqft_range_max__torcond';
      $sqft_rage_field_name_hidden_secondary = 'field_sqft_range_min__torcond';
      $key_to_write_custom_query = '';
      $min_range_value = $max_range_value = '*';
      if (!empty($filters[0]) && is_array($filters[0]) && $filters[0][0] == $sqft_rage_field_name) {
        if (!empty($filters[0][1])) {
          foreach ($filters as $value) {
            if ($value[0] == $sqft_rage_field_name) {
              if ($value[2] == '>=') {
                $min_range_value = $value[1];
              }
              if ($value[2] == '<=') {
                $max_range_value = $value[1];
              }
            }
          }
          foreach ($call_args['params']['fq'] as $key => $value) {
            if (strpos($value, '{!tag=facet:' . $sqft_rage_field_name . '}') !== FALSE) {
              unset($call_args['params']['fq'][$key]);
              $key_to_write_custom_query = $key;
            }
          }
          $call_args['params']['fq'][$key_to_write_custom_query] = 'is_' . $sqft_rage_field_name . ':[' . $min_range_value . ' TO ' . $max_range_value . '] OR is_' . $sqft_rage_field_name_hidden_secondary . ':[' . $min_range_value . ' TO ' . $max_range_value . ']';

          /**
           * Query examples for range facet.
           *
           * $call_args['params']['fq'][0] = 'is_field_test_range_max:["300" TO "700"] OR is_field_test_range_min:["300" TO "700"]';
           *
           * $call_args['params']['fq'][0] = '{!tag=facet:field_test_range_max}is_field_test_range_max:["300" TO *]';
           * $call_args['params']['fq'][1] = '{!tag=facet:field_test_range_max}is_field_test_range_max:[* TO "700"]';
           */
        }
      }
    }
  }

  if (!empty($facet_item) && isset($facet_item[0]) && is_object($facet_item[0])) {
    $facet_item = $facet_item[0]->getFilters();

    // Changes query for item 'Owned' in field:locker facet.
    // Makes one checkbox for all possible options (except 'None').
    if (!empty($facet_item[0]) && is_array($facet_item[0]) && $facet_item[0][0] == 'field_locker__torcond') {
      if (!empty($facet_item[0][1])) {
        $facet_item = $facet_item[0][1];
        if ($facet_item !== 'None') {
          $call_args['params']['fq'][0] = '{!tag=facet:field_locker__torcond}((ss_field_locker__torcond:"Owned") OR (ss_field_locker__torcond:"Exclusive") OR (ss_field_locker__torcond:"Ensuite") OR (ss_field_locker__torcond:"Ensuite+Owned") OR (ss_field_locker__torcond:"Common") OR (ss_field_locker__torcond:"Ensuite+Exclusive"))';
        }
      }
    }
  }
}


/**
 * Implements hook_facet_items_alter().
 */
function ctrader_saf_facet_items_alter(&$build, &$settings) {
  switch ($settings->facet) {
    case 'field_locker__torcond':
      $replace_this_facet = 'Owned';
      $replaced_facet_count_number = 0;
      foreach ($build as $key => $item) {
        switch ($key) {
          case $replace_this_facet:
            $build[$replace_this_facet]["#markup"] = t('Require Locker');
            $build[$replace_this_facet]['#indexed_value'] = t('Require Locker');
            break;
          // Remove this facet item.
          default:
            unset($build[$key]);
            break;
        }
        if ($key != 'None') {
          $replaced_facet_count_number += isset($item['#count']) ? $item['#count'] : 0;
        }
      }
      $build[$replace_this_facet]['#count'] = $replaced_facet_count_number;
      break;
    case 'field_pets__torcond':
      $replace_this_facet = 'Restrict';
      $replaced_facet_count_number = 0;
      foreach ($build as $key => $item) {
        switch ($key) {
          case $replace_this_facet:
            $build[$replace_this_facet]["#markup"] = t('Pets Allowed');
            break;
          // Remove this facet item.
//          case 'restrict':
//            unset($build[$key]);
//            break;
          case 'N':
            unset($build[$key]);
          default;
        }
//        if ($key != 'none' && strrpos($key, '+') === FALSE) {
//          $replaced_facet_count_number += isset($item['#count']) ? $item['#count'] : 0;
//        }
      }
      break;
    case 'field_br__torcond':
      $adapter = facetapi_adapter_load($settings->searcher);
      $facet = facetapi_facet_load($settings->facet, $settings->searcher);
      $items = $adapter->getActiveItems($facet);
      $item_values = array();
      foreach ($items as $item) {
        $item_values[] = $item['value'];
      }
      $is_all_link_active = count($items) == 0;
      $all_link_path = $adapter->getFacetPath($facet, $item_values, TRUE);
      $all_link_query = $adapter->getQueryString($facet, $item_values, TRUE);
      $build['any'] = array(
        '#markup' => t('Any'),
        '#path' => $all_link_path,
        '#html' => FALSE,
        '#count' => NULL,
        '#indexed_value' => 0,
        '#active' => $is_all_link_active,
        '#item_parents' => array(),
        '#item_children' => array(),
        '#query' => $all_link_query,
      );
      break;
    case 'field_prkg_inc__torcond':
      unset($build['N']);
      $build['Y']['#markup'] = t('Require Parking');
      break;
    case 'field_s_r__torcond':
      $build['Lease']['#markup'] = t('For rent');
      $build['Sale']['#markup'] = t('For sale');
      break;
  }
}


/**
 * Implements hook_current_search_items().
 */
function ctrader_saf_current_search_items() {

}


/**
 * Implements hook_block_info().
 */
function ctrader_saf_block_info() {
  $blocks['ctrader_search_button'] = array(
    'info' => t('Custom block: Search button form'),
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function ctrader_saf_block_view($delta = '') {
  $block = array();
  if ($delta == 'ctrader_search_button') {
    $block['content'] = drupal_get_form('_ctrader_saf_search_button_form');
    $block['subject'] = t('Block with search button for facet search');
    if (isset($_SESSION['search_link_calculate'])) {
      unset($_SESSION['search_link_calculate']);
    }
  }
  return $block;
}

/**
 * Form wit "SEARCH" button on homepage.
 */
function _ctrader_saf_search_button_form($form, &$form_state) {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
//    '#disabled' => TRUE,
  );
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'ctrader_saf') . '/js/rewritten_facetapi.js',
  );
  return $form;
}


function _ctrader_saf_search_button_form_submit($form, &$form_state) {
//  $query = drupal_http_build_query($_SESSION['search_link_calculate']['f'],'f');
  $path = '/results';
  $url = url($path, array(
    'query' => $_SESSION['search_link_calculate'],
    'absolute' => TRUE
  ));
  unset($_SESSION['search_link_calculate']);
  $form_state['redirect'] = $url;
}


function _ctrader_saf_search_link_calculate_page_callback() {
//  unset($_SESSION['search_link_calculate']);
  if (!isset($_SESSION['search_link_calculate']['f'])) {
    $_SESSION['search_link_calculate']['f'] = array();
  }
  $set_search_option = TRUE;
  foreach ($_SESSION['search_link_calculate']['f'] as $key => $value) {
    if ($value == $_POST['/main-page?f'][0]) {
      unset($_SESSION['search_link_calculate']['f'][$key]);
      $set_search_option = FALSE;
    }
  }
  if ($set_search_option) {
    if (isset($_POST['/main-page?f'][0])) {
      $_SESSION['search_link_calculate']['f'][] = $_POST['/main-page?f'][0];
    }
    elseif (isset($_POST['/results?f'][0])) {
      $_SESSION['search_link_calculate']['f'][] = $_POST['/results?f'][0];
    }
  }
  sort($_SESSION['search_link_calculate']['f']);
  return t('page not for viewing');
}


/**
 * Implements hook_facetapi_facet_info_alter().
 */
function ctrader_saf_facetapi_facet_info_alter(array &$facet_info, array $searcher_info) {

}
