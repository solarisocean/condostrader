<?php

// alias for search result page.
define('CTRADER_SEARCH_RESULT_PAGE', 'search-results');


/**
 * Implements hook_init().
 */
function ctrader_saf_init() {
  drupal_add_css(drupal_get_path('module', 'ctrader_saf') . '/css/ctrader_saf.css');
  drupal_add_js(drupal_get_path('module', 'ctrader_saf') . '/js/facets_script.js');
  if (isset($_SESSION['stored_search_options']) || isset($_SESSION['search_link_calculate'])) {
    unset($_SESSION['neighbourhood_json']);
  }
  unset($_SESSION['stored_search_options']);
  unset($_SESSION['search_link_calculate']);
}


/**
 * Implements hook_js_alter().
 */
function ctrader_saf_js_alter(&$javascript) {
  $current_path = current_path();
  if ($current_path == 'main-page' || $current_path == '' || $current_path == CTRADER_SEARCH_RESULT_PAGE) {
    if (isset($javascript['sites/all/modules/facetapi/facetapi.js']) && isset($javascript['sites/all/modules/ctrader_saf/js/rewritten_search_api_ranges.js'])) {
      unset($javascript['sites/all/modules/facetapi/facetapi.js']);
    }
  }
}


/**
 * Implements hook_menu().
 */
function ctrader_saf_menu() {
  $items = array();
  $items['search-link-calculate'] = array(
    'title' => 'Search link calculating page',
    'page callback' => '_ctrader_saf_search_link_calculate_page_callback',
    'access callback' => TRUE,
  );
  return $items;
}


/**
 * Implements hook_form_alter().
 */
function ctrader_saf_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && $form['#id'] == 'views-exposed-form-search-results-ctrader-block-1') {
//    $form['sort_bef_combine']['#default_value'] = '';
  }
  if ($form_id == 'search_api_ranges_block_slider_view_form_field_sqft_range_max__torcond') {
//    $form['range-min']['#value'] = 0;
//    $form_state['build_info']['args'][0]['min'] = 0;
  }
  if ($form_id == 'search_api_ranges_block_slider_view_form_field_lp_dol__torcond' || $form_id == 'search_api_ranges_block_slider_view_form_field_sqft_range_max__torcond') {
    $form['#submit'] = array();
    $form['submit']['#ajax'] = array(
      'callback' => '_ctrader_saf_range_ajax_form_submit',
      'effect' => 'fade',
    );
    foreach ($form['#attached']['js'] as $key => $value) {
      if (is_string($value) && strpos($value, '/search_api_ranges/search_api_ranges.js')) {
        $form['#attached']['js'][$key] = drupal_get_path('module', 'ctrader_saf') . '/js/rewritten_search_api_ranges.js';
      }
    }
  }
  if ($form_id == 'views_exposed_form' && $form['#id'] == 'views-exposed-form-search-results-ctrader-page-1') {
    $form['#action'] = '/' . CTRADER_SEARCH_RESULT_PAGE;
    if (drupal_get_path_alias() == CTRADER_SEARCH_RESULT_PAGE) {

      // Needs for notice error disabling.
      if (!isset($form_state['#combine_param'])) {
        $form_state['#combine_param'] = 'del';
        $form_state['values']['del'] = '';
        $form_state['values']['sorting'] = '';
      }

      $form['search_api_aggregation_1']['#type'] = 'hidden';
      $form['#info']['filter-search_api_aggregation_1']['label'] = '';
    }
    elseif (drupal_is_front_page()) {
      $form['sorting']['#type'] = 'hidden';
      $form['search_api_aggregation_1']['#attributes']['placeholder'] = t('Search by Neighbourhood, Condo Address or Name ...');
      $form['search_api_aggregation_1']['#size'] = 70;
    }
  }

  // Show only needed fields in index field form (problem with large data in POST).
  if ($form_id == 'search_api_admin_index_fields') {
    foreach ($form['fields'] as $key => $field) {
      if (strpos($key, 'field_reference_to_condo:') !== FALSE) {
        $needs_referenced_fields = array(
          ':field_lp_dol__torcond',
          ':field_s_r__torcond',
          ':field_price_per_sqft__torcond',
          ':field_sqft__torcond',
          ':field_reference_to_condo',
        );
        $delete_field = TRUE;
        foreach ($needs_referenced_fields as $value) {
          if (strpos($key, $value) !== FALSE) {
            $delete_field = FALSE;
          }
        }
        if ($delete_field) {
          unset($form['fields'][$key]);
        }
      }
    }
  }
}


/**
 * Implements hook_search_api_ranges_minmax_alter().
 */
function ctrader_saf_search_api_ranges_minmax_alter(&$variables, &$order) {
  if ($variables['range_field'] == 'field_sqft_range_max__torcond') {

  }
}


/**
 * Implements hook_entity_presave().
 */
function ctrader_saf_entity_presave($entity, $type) {

}


/**
 * Implements hook_search_api_solr_query_alter().
 */
function ctrader_saf_search_api_solr_query_alter(array &$call_args, SearchApiQueryInterface $query) {
  $facet_item = $query->getFilter()->getFilters();
  foreach ($facet_item as $item) {
    if (is_object($item) && is_object(reset($item->getFilters()))) {
      $filters = $item->getFilters()[0]->getFilters();

      // Changes query for range facet (field: sqft).
      // Makes one range form for two fields.
      $sqft_rage_field_name = 'field_sqft_range_max__torcond';
      $sqft_rage_field_name_hidden_secondary = 'field_sqft_range_min__torcond';
      $key_to_write_custom_query = '';
      $min_range_value = $max_range_value = '*';
      if (!empty($filters[0]) && is_array($filters[0]) && $filters[0][0] == $sqft_rage_field_name) {
        if (!empty($filters[0][1])) {
          foreach ($filters as $value) {
            if ($value[0] == $sqft_rage_field_name) {
              if ($value[2] == '>=') {
                $min_range_value = $value[1];
              }
              if ($value[2] == '<=') {
                $max_range_value = $value[1];
              }
            }
          }
          foreach ($call_args['params']['fq'] as $key => $value) {
            if (strpos($value, '{!tag=facet:' . $sqft_rage_field_name . '}') !== FALSE) {
              unset($call_args['params']['fq'][$key]);
              $key_to_write_custom_query = $key;
            }
          }
          $call_args['params']['fq'][$key_to_write_custom_query] = 'is_' . $sqft_rage_field_name . ':[' . $min_range_value . ' TO ' . $max_range_value . '] OR is_' . $sqft_rage_field_name_hidden_secondary . ':[' . $min_range_value . ' TO ' . $max_range_value . ']';

          /**
           * Query examples for range facet.
           *
           * $call_args['params']['fq'][0] = 'is_field_test_range_max:["300" TO "700"] OR is_field_test_range_min:["300" TO "700"]';
           *
           * $call_args['params']['fq'][0] = '{!tag=facet:field_test_range_max}is_field_test_range_max:["300" TO *]';
           * $call_args['params']['fq'][1] = '{!tag=facet:field_test_range_max}is_field_test_range_max:[* TO "700"]';
           */
        }
      }
    }
  }

  if (!empty($facet_item) && isset($facet_item[0]) && is_object($facet_item[0])) {
    $facet_item = $facet_item[0]->getFilters();

    // Changes query for item 'Owned' in field:locker facet.
    // Makes one checkbox for all possible options (except 'None').
    if (!empty($facet_item[0]) && is_array($facet_item[0]) && $facet_item[0][0] == 'field_locker__torcond') {
      if (!empty($facet_item[0][1])) {
        $facet_item = $facet_item[0][1];
        if ($facet_item !== 'None') {
          $call_args['params']['fq'][0] = '{!tag=facet:field_locker__torcond}((ss_field_locker__torcond:"Owned") OR (ss_field_locker__torcond:"Exclusive") OR (ss_field_locker__torcond:"Ensuite") OR (ss_field_locker__torcond:"Ensuite+Owned") OR (ss_field_locker__torcond:"Common") OR (ss_field_locker__torcond:"Ensuite+Exclusive"))';
        }
      }
    }
  }

  if (isset($_GET['polygon'])) {
    foreach ($call_args['params']['fq'] as $key => $value) {
      if (strpos($value, 'rpts_field_search_point_string:"Intersects(') === 0) {
        $call_args['params']['fq'][$key] = 'rpts_field_search_point_string:"Intersects(POLYGON((' . $_GET['polygon'] . ')))"';
        $changed_polygon_query = TRUE;
      }
    }
    if (!isset($changed_polygon_query)) {
      $call_args['params']['fq'][] = 'rpts_field_search_point_string:"Intersects(POLYGON((' . $_GET['polygon'] . ')))"';
    }
  }
  elseif (isset($_GET['neighbourhoods'])) {
    $neib_query = '(' . str_replace('-', ' OR ', $_GET['neighbourhoods']) . ')';
    $call_args['params']['fq'][] = 'im_field_city_region__torcond:' . $neib_query;
  }
}


/**
 * Implements hook_facet_items_alter().
 */
function ctrader_saf_facet_items_alter(&$build, &$settings) {
  switch ($settings->facet) {
    case 'field_locker__torcond':
      $replace_this_facet = 'Owned';
      $replaced_facet_count_number = 0;
      foreach ($build as $key => $item) {
        switch ($key) {
          case $replace_this_facet:
            $build[$replace_this_facet]['#markup'] = l(t('Require Locker'), '');
            $build[$replace_this_facet]['#html'] = TRUE;
            $build[$replace_this_facet]['#indexed_value'] = t('Require Locker');
            break;
          // Remove this facet item.
          default:
            unset($build[$key]);
            break;
        }
        if ($key != 'None') {
          $replaced_facet_count_number += isset($item['#count']) ? $item['#count'] : 0;
        }
      }
      $build[$replace_this_facet]['#count'] = $replaced_facet_count_number;
      break;
    case 'field_pets__torcond':
      $replace_this_facet = 'Restrict';
      $replaced_facet_count_number = 0;
      foreach ($build as $key => $item) {
        switch ($key) {
          case $replace_this_facet:
            $build[$replace_this_facet]['#markup'] = l(t('Pets Allowed'), '');
            $build[$replace_this_facet]['#html'] = TRUE;
            break;
          case 'N':
            unset($build[$key]);
          default;
        }
      }
      break;
    case 'field_br__torcond':
      $adapter = facetapi_adapter_load($settings->searcher);
      $facet = facetapi_facet_load($settings->facet, $settings->searcher);
      $items = $adapter->getActiveItems($facet);
      $item_values = array();

      foreach ($build as $key => $build_item) {
        $build[$key]['#html'] = TRUE;
        $build[$key]['#markup'] = l(t($build_item['#markup']), '');
      }

      foreach ($items as $item) {
        $item_values[] = $item['value'];
      }
      $is_all_link_active = count($items) == 0;
      $all_link_path = $adapter->getFacetPath($facet, $item_values, TRUE);
      $all_link_query = $adapter->getQueryString($facet, $item_values, TRUE);
      $build['any'] = array(
        '#markup' => l(t('Any'), ''),
        '#path' => $all_link_path,
        '#html' => TRUE,
        '#count' => NULL,
        '#indexed_value' => 0,
        '#active' => $is_all_link_active,
        '#item_parents' => array(),
        '#item_children' => array(),
        '#query' => $all_link_query,
      );
      break;
    case 'field_prkg_inc__torcond':
      unset($build['N']);
      $build['Y']['#markup'] = l(t('Require Parking'), '');
      $build['Y']['#html'] = TRUE;
      break;
    case 'field_s_r__torcond':
      $build['Lease']['#markup'] = l(t('For rent'), '');
      $build['Sale']['#markup'] = l(t('For sale'), '');
      $build['Sale']['#html'] = $build['Lease']['#html'] = TRUE;

      // Makes this item active on homepage load.
      if (isset($_SESSION['search_link_calculate']['f']) && drupal_get_path_alias() != 'results') {
        foreach ($_SESSION['search_link_calculate']['f'] as $value) {
          if (strpos($value, 'field_s_r__torcond') !== FALSE) {
            $field_search_data = explode(':', $value);
            $build[$field_search_data[1]]['#active'] = TRUE;
          }
        }
      }
      break;
    case 'field_sqft_range_max__torcond':

      break;
    case 'field_style__torcond':

      break;
  }
}


/**
 * Implements hook_current_search_items().
 */
function ctrader_saf_current_search_items() {

}


/**
 * Implements hook_block_info().
 */
function ctrader_saf_block_info() {
  $blocks['ctrader_search_button'] = array(
    'info' => t('Custom block: Search button form'),
  );
  $blocks['neighbourhoods_hs'] = array(
    'info' => t('Hierarchical select for neighbourhoods vocabulary.'),
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function ctrader_saf_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'ctrader_search_button':
      $block['subject'] = t('Block with search button for facet search');
      $block['content'] = _ctrader_saf_blocks_content_function($delta);
      break;
    case 'neighbourhoods_hs':
      $block['subject'] = t('Neighbourhoods hierarchical select.');
      $block['content'] = drupal_get_form('hierarchical_select_neighbourhoods_vocabulary_form');
      break;
  }
  return $block;
}

function _ctrader_saf_blocks_content_function($delta) {
  switch ($delta) {
    case 'ctrader_search_button':
      $alias = drupal_get_path_alias();
      $reset_search_option = TRUE;
      if ($alias == 'main-page') {
        if (isset($_POST['form_id']) && $_POST['form_id'] == '_ctrader_saf_search_button_form') {
          $reset_search_option = FALSE;
        }
        if ($reset_search_option) {
          if (isset($_SESSION['search_link_calculate'])) {
            unset($_SESSION['search_link_calculate']);
          }
          $min_value_sqft = db_query('SELECT MIN(field_sqft_range_min__torcond_value) FROM {field_data_field_sqft_range_min__torcond}')->fetchField();
          $max_value_sqft = db_query('SELECT MAX(field_sqft_range_max__torcond_value) FROM {field_data_field_sqft_range_max__torcond}')->fetchField();
          $min_value_price = round(db_query('SELECT MIN(field_lp_dol__torcond_value) FROM {field_data_field_lp_dol__torcond}')->fetchField());
          $max_value_price = round(db_query('SELECT MAX(field_lp_dol__torcond_value) FROM {field_data_field_lp_dol__torcond}')->fetchField());
          $_SESSION['search_link_calculate']['f'] = array(
            'field_s_r__torcond:Sale',
            'field_sqft_range_max__torcond:[' . $min_value_sqft . ' TO ' . $max_value_sqft . ']',
            'field_lp_dol__torcond:[' . $min_value_price . ' TO ' . $max_value_price . ']',
          );
        }
      }

      $search_button_form = drupal_get_form('_ctrader_saf_search_button_form');

      // Map input.
      if (isset($_GET['polygon'])) {
        // $search_button_form['geo_loc']['#value'] = "POLYGON(({$_GET['polygon']}))";
      }
      elseif (isset($_GET['neighbourhoods'])) {
        $neighb_array = explode('-', $_GET['neighbourhoods']);
        foreach ($neighb_array as $key => $value) {
          $neighb_array[$key] = 'tid' . $value;
        }
        $search_button_form['geo_loc']['#value'] = implode(', ', $neighb_array);
      }

      /* @see _ctrader_saf_search_button_form_submit */
      // SALE-RENT facet checkboxes.
      $lease_rent_field_name = 'field_s_r__torcond';
      if (isset($_GET['f'][0])) {
        $lease_rent_facet_query = '';
        $lease_rent_facet_path = '/' . $_GET['q'];
        foreach ($_GET['f'] as $value) {
          if (strpos($value, $lease_rent_field_name) !== FALSE) {
            $lease_rent_facet_query['f'][] = $value;
            $search_button_form['sale_rent']['#value'] = "{$lease_rent_facet_path}?f[0]={$value}";
          }
        }
      }

      // PETS facet checkboxes.
      $pets_field_name = 'field_pets__torcond';
      if (isset($_GET['f'][0])) {
        foreach ($_GET['f'] as $value) {
          if (strpos($value, $pets_field_name) !== FALSE) {
            $search_button_form['pets']['#value'] = '1';
          }
        }
      }

      // LOCKER facet checkboxes.
      $locker_field_name = 'field_locker__torcond';
      if (isset($_GET['f'][0])) {
        foreach ($_GET['f'] as $value) {
          if (strpos($value, $locker_field_name) !== FALSE) {
            $search_button_form['locker']['#value'] = '1';
          }
        }
      }

      // PARKING facet checkboxes.
      $parking_field_name = 'field_prkg_inc__torcond';
      if (isset($_GET['f'][0])) {
        foreach ($_GET['f'] as $value) {
          if (strpos($value, $parking_field_name) !== FALSE) {
            $search_button_form['parking']['#value'] = '1';
          }
        }
      }

      // BEDS facet checkboxes.
      $beds_field_name = 'field_br__torcond';
      if (isset($_GET['f'][0])) {
        foreach ($_GET['f'] as $value) {
          if (strpos($value, $beds_field_name) !== FALSE) {
            $value = str_replace("{$beds_field_name}:", '', $value);
            if (is_numeric($value)) {
              $search_button_form['beds']['#value'] = $value;
            }
          }
        }
      }

      // TYPE facet selectlist.
      $type_field_name = 'field_style__torcond';
      if (isset($_GET['f'][0])) {
        foreach ($_GET['f'] as $value) {
          if (strpos($value, $type_field_name) !== FALSE) {
            $value = str_replace("{$type_field_name}:", '', $value);
            $search_button_form['type']['#value'] = $value;
          }
        }
      }

      // PRICE facet slider.
      $price_field_name = 'field_lp_dol__torcond';
      if (isset($_GET['f'][0])) {
        foreach ($_GET['f'] as $value) {
          if (strpos($value, $price_field_name) !== FALSE) {
            $value = str_replace(array(
              "{$price_field_name}:[",
              " TO",
              "]"
            ), '', $value);
            $value = explode(' ', $value);
            $search_button_form['price_min']['#value'] = $value[0];
            $search_button_form['price_max']['#value'] = $value[1];
          }
        }
      }

      // SIZE facet slider.
      $size_field_name = 'field_sqft_range_max__torcond';
      if (isset($_GET['f'][0])) {
        foreach ($_GET['f'] as $value) {
          if (strpos($value, $size_field_name) !== FALSE) {
            $value = str_replace(array(
              "{$size_field_name}:[",
              " TO",
              "]"
            ), '', $value);
            $value = explode(' ', $value);
            $search_button_form['size_min']['#value'] = $value[0];
            $search_button_form['size_max']['#value'] = $value[1];
          }
        }
      }

      return $search_button_form;
  }
}

/**
 * Form wit "SEARCH" button on homepage.
 */
function _ctrader_saf_search_button_form($form, &$form_state) {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
//    '#disabled' => TRUE,
  );
  $form['geo_loc'] = array(
    '#type' => 'hidden',
  );

  //Have added hidden inputs for facet filter.
  $form['sale_rent'] = array(
    '#type' => 'hidden',
  );

  if (drupal_is_front_page()) {
    $form['sale_rent']['#default_value'] = '/?f[0]=field_s_r__torcond:Sale';
  }

  $form['region'] = array(
    '#type' => 'hidden',
  );

  $form['region_1'] = array(
    '#type' => 'hidden',
  );

  $form['region_2'] = array(
    '#type' => 'hidden',
  );

  $form['parking'] = array(
    '#type' => 'hidden',
  );

  $form['price_min'] = array(
    '#type' => 'hidden',
  );

  $form['price_max'] = array(
    '#type' => 'hidden',
  );

  $form['size_min'] = array(
    '#type' => 'hidden',
  );

  $form['size_max'] = array(
    '#type' => 'hidden',
  );

  $form['pets'] = array(
    '#type' => 'hidden',
  );

  $form['type'] = array(
    '#type' => 'hidden',
  );

  $form['locker'] = array(
    '#type' => 'hidden',
  );

  $form['beds'] = array(
    '#type' => 'hidden',
  );

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'ctrader_saf') . '/js/rewritten_facetapi.js',
  );
  return $form;
}


function _ctrader_saf_search_button_form_submit($form, &$form_state) {
//  $query = drupal_http_build_query($_SESSION['search_link_calculate']['f'],'f');
  //  $query = $_SESSION['search_link_calculate'];
  $path = '/' . CTRADER_SEARCH_RESULT_PAGE;
  $query = array();

  /* @see _ctrader_saf_blocks_content_function */
  // Map search.
  if (strpos($form_state['values']['geo_loc'], 'POLYGON') === 0) {
    $polygon_string = str_replace(array(
      'POLYGON((',
      '))',
    ), '', $form_state['values']['geo_loc']);
    $polygon_array = explode(',', $polygon_string);
    foreach ($polygon_array as $key => $value) {
      $value_array = explode(' ', $value);
      foreach ($value_array as $c_key => $c_value) {
        $value_array[$c_key] = round($c_value, 5);
      }
      $polygon_array[$key] = implode(' ', $value_array);
    }
    $polygon_string = implode(',', $polygon_array);
    $query['polygon'] = $polygon_string;
  }
  elseif (strpos($form_state['values']['geo_loc'], 'tid') === 0) {
    $tids = str_replace('tid', '', $form_state['values']['geo_loc']);
    $tids = str_replace(', ', '-', $tids);

    // Checks if it is duplicates in neighbourhoods search input.
    // And if there are duplicates - delete those tids from query.
    $tids_array = explode('-', $tids);
    $duplicates = array();
    $new_tids = array();
    foreach ($tids_array as $key => $value) {
      if (in_array($value, $new_tids)) {
        $duplicates[] = $value;
      }
      else {
        $new_tids[] = $value;
      }
    }
    foreach ($tids_array as $key => $value) {
      if (in_array($value, $duplicates)) {
        unset($tids_array[$key]);
      }
    }
    $tids = implode('-', $tids_array);
    $query['neighbourhoods'] = $tids;
  }

  // SALE-RENT facet checkboxes.
  $lease_rent_field_name = 'field_s_r__torcond';
  if (strpos($form_state['values']['sale_rent'], $lease_rent_field_name) !== FALSE) {
    $facet_url = drupal_parse_url($form_state['values']['sale_rent']);
    $query['f'][] = array_pop($facet_url['query']['f']);
  }

  // PETS facet checkboxes.
  $pets_field_name = 'field_pets__torcond';
  if ($form_state['values']['pets']) {
    $query['f'][] = "{$pets_field_name}:Restrict";
  }

  // LOCKER facet checkboxes.
  $locker_field_name = 'field_locker__torcond';
  if ($form_state['values']['locker']) {
    $query['f'][] = "{$locker_field_name}:Owned";
  }

  // PARKING facet checkboxes.
  $parking_field_name = 'field_prkg_inc__torcond';
  if ($form_state['values']['parking']) {
    $query['f'][] = "{$parking_field_name}:Y";
  }

  // BEDS facet checkboxes.
  $beds_field_name = 'field_br__torcond';
  if (is_numeric($form_state['values']['beds'])) {
    $query['f'][] = "{$beds_field_name}:{$form_state['values']['beds']}";
  }

  // TYPE facet selectlist.
  $type_field_name = 'field_style__torcond';
  if ($form_state['values']['type']) {
    $query['f'][] = "{$type_field_name}:{$form_state['values']['type']}";
  }

  // PRICE facet slider.
  $price_field_name = 'field_lp_dol__torcond';
  if ($form_state['values']['price_min']) {
    $query['f'][] = "{$price_field_name}:[{$form_state['values']['price_min']} TO {$form_state['values']['price_max']}]";
  }

  // SIZE facet slider.
  $size_field_name = 'field_sqft_range_max__torcond';
  if ($form_state['values']['size_min']) {
    $query['f'][] = "{$size_field_name}:[{$form_state['values']['size_min']} TO {$form_state['values']['size_max']}]";
  }

  $url = url($path, array(
    'query' => $query,
    'absolute' => TRUE
  ));
  $form_state['redirect'] = $url;
}


/**
 * Form with hierarchical select for neighbourhoods vocabulary.
 */
function hierarchical_select_neighbourhoods_vocabulary_form($form, &$form_state) {
  $form['hierarchical_select'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div id="hierarchical_select" class="hierarchical_select_wrapper">',
    '#suffix' => '</div>',
    '#attributes' => array(
      'class' => array(
        'hierarchical-select',
        'neighbourhoods-hierarchical',
      ),
    ),
  );

  $vocab = taxonomy_vocabulary_machine_name_load('neighbourhoods');
  // There are some hidden terms by js. @see facets_script.js


  $vid = $vocab->vid;

  $form['hierarchical_select']['select_subject'] = array(
    '#type' => 'hierarchical_select',
    '#title' => t('Region:'),
    '#size' => 1,
    '#config' => array(
      'module' => 'hs_taxonomy',
      'params' => array(
        'vid' => $vid //The vocab id
      ),
      'save_lineage' => 1,
      'enforce_deepest' => 0,
      'entity_count' => 0,
      'require_entity' => 0,
      'resizable' => 0,
      'level_labels' => array(
        'status' => 1,
        'labels' => array(
          0 => t('-- city --'),
          1 => t('-- region --'),
          2 => t('-- neighbourhood --'),
        ),
      ),
      'dropbox' => array(
        'status' => 0,
        'title' => t('All selections'),
        'limit' => 0,
        'reset_hs' => 1,
      ),
      'editability' => array(
        'status' => 0,
        'item_types' => array(),
        'max_levels' => 3,
      ),
      'animation_delay' => 600,
      'special_items' => array(),
      'render_flat_select' => 1,
      'path' => 'hierarchical_select_json',
    ),
    '#default_value' => 0,
  );
  return $form;
}


/**
 * @return null|string
 */
function _ctrader_saf_search_link_calculate_page_callback() {
//  unset($_SESSION['search_link_calculate_results_page']);
  if (!isset($_SESSION['search_link_calculate']['f'])) {
    $_SESSION['search_link_calculate']['f'] = array();
  }

  $set_search_option = TRUE;
  foreach ($_SESSION['search_link_calculate']['f'] as $key => $value) {
    if ($value == $_POST['/main-page?f'][0]) {
      unset($_SESSION['search_link_calculate']['f'][$key]);
      $set_search_option = FALSE;
    }

    // For sale-lease facet.
    if (strpos($value, 'field_s_r__torcond') !== FALSE && strpos($_POST['/main-page?f'][0], 'field_s_r__torcond') !== FALSE) {
      $_SESSION['search_link_calculate']['f'][$key] = $_POST['/main-page?f'][0];
      return t('page not for viewing');
    }

    // For beds facet.
    if (strpos($value, 'field_br__torcond') !== FALSE && strpos($_POST['/main-page?f'][0], 'field_br__torcond') !== FALSE) {
      $_SESSION['search_link_calculate']['f'][$key] = $_POST['/main-page?f'][0];
      return t('page not for viewing');
    }
  }
  if ($set_search_option) {
    if (isset($_POST['/main-page?f'][0])) {
      $_SESSION['search_link_calculate']['f'][] = $_POST['/main-page?f'][0];
      unset($_POST['/main-page?f']);
    }
    if (isset($_POST['/' . CTRADER_SEARCH_RESULT_PAGE . '?f'][0])) {
      $_SESSION['search_link_calculate']['f'][] = $_POST['/' . CTRADER_SEARCH_RESULT_PAGE . '?f'][0];
      unset($_POST['/' . CTRADER_SEARCH_RESULT_PAGE . '?f']);
    }
    if (isset($_POST['f'])) {
      $_SESSION['search_link_calculate']['f'][] = $_POST['f'][1];
      unset($_POST['f']);
    }
  }
  sort($_SESSION['search_link_calculate']['f']);
  return t('page not for viewing');
}


/**
 * Rewrites default submit function for facet range form (field_lp_dol__torcond).
 *
 * @param $form
 * @param $form_state
 */
function _ctrader_saf_range_ajax_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $range_field = $form_state['input']['range-field'];

  // Prepare params and existing filter $pos (if any)
  $params = drupal_get_query_parameters($_GET, array('q', 'page'));

  // Get pretty path path and goto()
  if (drupal_multilingual() && variable_get('locale_language_negotiation_url_part') == LOCALE_LANGUAGE_NEGOTIATION_URL_PREFIX) {
    list($language, $path) = language_url_split_prefix(request_path(), language_list());
    $language = $language ? $language : NULL;
  }
  else {
    $path = request_path();
    $language = NULL;
  }
  if (module_exists('facetapi_pretty_paths')) {
    $exists = FALSE;
    $split_path = explode('/', $path);
    foreach ($split_path as $key => $value) {
      if ($value == $range_field) {
        $exists = $split_path[$key + 1];
      }
    }

    // Decision: replace existing range or add new
    $new_range = '[' . $values['range-from'] . ' TO ' . $values['range-to'] . ']';
    if ($exists) {
      $path = str_replace($exists, $new_range, $path);
    }
    else {
      $path .= '/' . $range_field . '/' . $new_range;
    }

    // Unset non-pretty query
    unset($params['f']);
  }
  else {
    // Not pretty path logic
    $query = $range_field . ':' . '[' . $values['range-from'] . ' TO ' . $values['range-to'] . ']';

    $pos = -1;
    if (isset($params['f'])) {
      foreach ($params['f'] as $key => $param) {
        if (strpos($param, $range_field . ':') !== FALSE) {
          $pos = $key;
        }
      }
    }

    if ($pos != -1) {
      $params['f'][$pos] = $query;
    }
    else {
      $params['f'][] = $query;
    }
  }


  /******************** added code *****************************/
  if (isset($_SESSION['search_link_calculate']['f'])) {
    $not_in_search_query = TRUE;
    foreach ($_SESSION['search_link_calculate']['f'] as $key => $value) {
      if (strpos($value, $range_field) !== FALSE) {
        $_SESSION['search_link_calculate']['f'][$key] = $query;
        $not_in_search_query = FALSE;
      }
    }
    if ($not_in_search_query) {
      $_SESSION['search_link_calculate']['f'][] = $query;
    }
  }
  else {
    $_SESSION['search_link_calculate']['f'][] = $query;
  }
}


/**
 * Implements hook_search_api_solr_search_results_alter().
 */
function ctrader_saf_search_api_solr_search_results_alter(array &$results, SearchApiQueryInterface $query, $response) {
  $alias = drupal_get_path_alias();
  if (($alias == 'main-page' || $alias == '')) {
//    unset($_SESSION['default_solrsearch_results']);
//    $_SESSION['default_solrsearch_results'] = $results;
  }
  if ($results['result count'] == 0) {

  }
}


/**
 * Implements hook_facetapi_empty_behaviors().
 */
function ctrader_saf_facetapi_empty_behaviors() {
  return array(
    'ctrader_facet_empty_behaviors' => array(
      'handler' => array(
        'label' => t('@ctrader facet empty behavior', array('@ctrader' => 'CTrader')),
        'class' => 'FacetapiEmptyBehaviorCtrader',
      ),
    ),
  );
}


/**
 * Implements hook_facetapi_widgets().
 */
function ctrader_saf_facetapi_widgets() {
  return array(
    'ctrader_range_widget' => array(
      'handler' => array(
        'label' => t('@ctrader range', array('@ctrader' => 'CondosTrader')),
        'class' => 'SearchApiCtraderRangesWidgetUISlider',
        'query types' => array('term', 'numeric_range'),
      ),
    ),
    'ctrader_facetapi_select_dropdowns' => array(
      'handler' => array(
        'label' => t('Ctrader Select Field (Dropdowns)'),
        'class' => 'CtraderFacetapiSelectDropdowns',
        'query types' => array('term', 'date'),
      ),
    ),
  );
}


/**
 * Implements hook_forms().
 */
function ctrader_saf_forms($form_id) {
  // Build all multiselect facet forms on the page using the same form
  // callback.
  $forms = array();
  if (strpos($form_id, '_ctrader_saf_facetapi_select_facet_form_') === 0) {
    $forms[$form_id]['callback'] = '_ctrader_saf_facetapi_select_facet_form';
  }
  return $forms;
}

function _ctrader_saf_facetapi_select_facet_form($form, &$form_state, $variables) {
  if (!empty($variables['options'])) {
    $form['facets'] = array(
      '#type' => 'select',
      '#default_value' => '',
      '#options' => $variables['options'],
      '#attributes' => array(
        'class' => array('ctrader-facetapi-select'),
      ),
      '#attached' => array(
        'js' => array(
          drupal_get_path('module', 'ctrader_saf') . '/js/rewritten_facetapi_select.js',
        ),
      ),
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#attributes' => array('class' => array('ctrader-facetapi-select-submit')),
      '#value' => t('Submit'),
    );
  }

  if (!empty($variables['default_option_label'])) {
    $form['facets']['#empty_option'] = $variables['default_option_label'];
  }

  return $form;
}

/**
 * Submit function for facetapi_select_form().
 */
function _ctrader_saf_facetapi_select_facet_form_submit($form, &$form_state) {
  $parsed_url = drupal_parse_url($form_state['values']['facets']);
//  drupal_goto($parsed_url['path'], array('query' => $parsed_url['query']));
}


/**
 * Implements hook_search_api_solr_field_mapping_alter().
 */
function ctrader_saf_search_api_solr_field_mapping_alter(SearchApiIndex $index, array &$fields) {
  $field_name = 'field_search_point_string';
  if (isset($fields[$field_name])) {
    $fields[$field_name] = 'rpts_' . $field_name;
  }
}
