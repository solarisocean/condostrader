<?php

/**
 * If TRUE - activates pretty path for region dropdown facet.
 * ('?region=tid>tid>tid' becomes '/tname/tname/tname')
 */
define('ENABLE_PRETTY_PATH_FOR_REGION_DROPDOWN_FACET', TRUE);

/**
 * Implements hook_init().
 */
function ctrader_saf_init() {
  drupal_add_css(drupal_get_path('module', 'ctrader_saf') . '/css/ctrader_saf.css');
  drupal_add_js(drupal_get_path('module', 'ctrader_saf') . '/js/facets_script.js');

  drupal_add_css(drupal_get_path('module', 'ctrader_saf') . '/css/nouislider.min.css');
  drupal_add_js(drupal_get_path('module', 'ctrader_saf') . '/js/nouislider.min.js');

  drupal_add_js(drupal_get_path('module', 'ctrader_saf') . '/js/rewritten_search_api_ranges.js');
}

/**
 * Needs for rewrites query if it is arguments after 'search-results'.
 * (something like pretty path for '?region=tid>tid>tid' query)
 *
 * @param $path
 * @param $original_path
 * @param $path_language
 */
function ctrader_saf_url_inbound_alter(&$path, $original_path, $path_language) {
  if (ENABLE_PRETTY_PATH_FOR_REGION_DROPDOWN_FACET === TRUE) {
    $vocabulary_name = 'neighbourhoods';
    $path_array = explode('/', $path);
    if (array_shift($path_array) == 'search-results') {
      if (!empty($path_array)) {
        $region_query_array = array();
        $term = taxonomy_get_term_by_name($path_array[0], $vocabulary_name);
        if (!empty($term)) { // Gets first level tid for query.
          $first_level_term = reset($term);
          $region_query_array[] = $first_level_term->tid;
          if (isset($path_array[1])) { // Gets second level tid for query.
            $term = taxonomy_get_term_by_name($path_array[1], $vocabulary_name);
            if (!empty($term) && count($term) == 1) {
              $second_level_term = reset($term);
              $region_query_array[] = $second_level_term->tid;
            }
            elseif (!empty($term) && count($term) > 1) {
              foreach ($term as $value) {
                $second_level_term_parent = taxonomy_get_parents($value->tid);
                if ($second_level_term_parent) {
                  $parent_tids = array_keys($second_level_term_parent);
                  if (in_array($first_level_term->tid, $parent_tids)) {
                    $second_level_term = $value;
                    $region_query_array[] = $second_level_term->tid;
                  }
                }
              }
            }
            if (isset($path_array[2])) { // Gets third level tid for query.
              $term = taxonomy_get_term_by_name($path_array[2], $vocabulary_name);
              if (!empty($term) && count($term) == 1) {
                $third_level_term = reset($term);
                $region_query_array[] = $third_level_term->tid;
              }
              elseif (!empty($term) && count($term) > 1) {
                foreach ($term as $value) {
                  $third_level_term_parent = taxonomy_get_parents($value->tid);
                  if ($third_level_term_parent) {
                    $parent_tids = array_keys($third_level_term_parent);
                    if (isset($second_level_term)) {
                      if (in_array($second_level_term->tid, $parent_tids)) {
                        $region_query_array[] = $value->tid;
                      }
                    }
                  }
                }
              }
            }
          }
        }

//        foreach ($path_array as $term_name) {
//          $term = taxonomy_get_term_by_name($term_name, $vocabulary_name);
//          if (!empty($term)) {
//            $term = reset($term);
//            $region_query_array[] = $term->tid;
//          }
//        }

        if (!empty($region_query_array)) {
          $_GET['region'] = implode('>', $region_query_array);
        }
      }
    }
  }
}

/**
 * Implements hook_js_alter().
 */
function ctrader_saf_js_alter(&$javascript) {
  $current_path = current_path();
  if ($current_path == 'main-page' || $current_path == '' || strpos($current_path, CTRADER_SEARCH_RESULT_PAGE) === 0) {
    if (isset($javascript['sites/all/modules/facetapi/facetapi.js']) && isset($javascript['sites/all/modules/ctrader_saf/js/rewritten_search_api_ranges.js'])) {
      unset($javascript['sites/all/modules/facetapi/facetapi.js']);
    }
  }
}


/**
 * Implements hook_menu().
 */
function ctrader_saf_menu() {
  $items = array();
  $items['search-link-calculate'] = array(
    'title' => 'Search link calculating page',
    'page callback' => '_ctrader_saf_search_link_calculate_page_callback',
    'access callback' => TRUE,
  );
  return $items;
}


/**
 * Implements hook_form_alter().
 */
function ctrader_saf_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-search-results-ctrader-page-1' && !empty($form['timestamp'])) {
    $form['timestamp']['#type'] = 'hidden';
  }
  if ($form_id == 'search_api_ranges_block_slider_view_form_field_sqft_range_max__torcond') {
//    $form['range-min']['#value'] = 0;
//    $form_state['build_info']['args'][0]['min'] = 0;
  }
  if ($form_id == 'search_api_ranges_block_slider_view_form_field_lp_dol__torcond' || $form_id == 'search_api_ranges_block_slider_view_form_field_sqft_range_max__torcond') {
    $form['#submit'] = array();
    $form['submit']['#ajax'] = array(
      'callback' => '_ctrader_saf_range_ajax_form_submit',
      'effect' => 'fade',
    );
    $form['#attached']['js'][] = drupal_get_path('module', 'ctrader_saf') . '/js/jquery.price_format.2.0.js';
    foreach ($form['#attached']['js'] as $key => $value) {
      if (is_string($value) && strpos($value, '/search_api_ranges/search_api_ranges.js')) {
        $form['#attached']['js'][$key] = drupal_get_path('module', 'ctrader_saf') . '/js/rewritten_search_api_ranges.js';
      }
    }
  }

  $search_field_identifier = 'search';
  if ($form_id == 'views_exposed_form' && $form['#id'] == 'views-exposed-form-search-results-ctrader-page-1') {
    $form['#action'] = '/' . CTRADER_SEARCH_RESULT_PAGE;
    if (strpos(drupal_get_path_alias(), CTRADER_SEARCH_RESULT_PAGE) === 0) {

      // Needs for notice error disabling.
      if (!isset($form_state['#combine_param'])) {
        $form_state['#combine_param'] = 'del';
        $form_state['values']['del'] = '';
        $form_state['values']['sorting'] = '';
      }

      $form[$search_field_identifier]['#type'] = 'hidden';
      $form['#info']['filter-search_api_aggregation_1']['label'] = '';
    }
    elseif (drupal_is_front_page()) {
      $form['sorting']['#type'] = 'hidden';
      $form[$search_field_identifier]['#attributes']['placeholder'] = t('Type address, MLS number, ZIP code, area or neighbourhood name');
      $form[$search_field_identifier]['#size'] = 70;
    }

    // Change sorting labels.
    $form['sorting']['#options']['field_timestamp_sql_torcond ASC'] = t('Days on Market: Low to High');
    $form['sorting']['#options']['field_timestamp_sql_torcond DESC'] = t('Days on Market: High to Low');

    $form['sorting']['#options']['field_lp_dol_torcond ASC'] = t('Price: Low to High');
    $form['sorting']['#options']['field_lp_dol_torcond DESC'] = t('Price: High to Low');

    $form['sorting']['#options']['field_sqft_range_min_torcond ASC'] = t('Size: Low to High');
    $form['sorting']['#options']['field_sqft_range_min_torcond DESC'] = t('Size: High to Low');

    $form['sorting']['#options']['field_br_torcond ASC'] = t('Beds: Low to High');
    $form['sorting']['#options']['field_br_torcond DESC'] = t('Beds: High to Low');

    $form['sorting']['#options']['field_bath_tot_torcond ASC'] = t('Baths: Low to High');
    $form['sorting']['#options']['field_bath_tot_torcond DESC'] = t('Baths: High to Low');

    $form['sorting']['#options']['field_price_per_sqft_torcond ASC'] = t('Price per SQFT: Low to High');
    $form['sorting']['#options']['field_price_per_sqft_torcond DESC'] = t('Price per SQFT: High to Low');

    $form['sorting']['#options']['field_maint_torcond ASC'] = t('Maintenance Fees: Low to High');
    $form['sorting']['#options']['field_maint_torcond DESC'] = t('Maintenance Fees: High to Low');

    $form['sorting']['#options']['field_st_torcond ASC'] = t('Street Name: A to Z');
    $form['sorting']['#options']['field_st_torcond DESC'] = t('Street Name: Z to A');

    $form['sorting']['#options']['field_st_num_torcond ASC'] = t('Street Number: Low to High');
    $form['sorting']['#options']['field_st_num_torcond DESC'] = t('Street Number: High to Low');

  }

  // Header search input.
  if ($form_id == 'views_exposed_form' && $form['#id'] == 'views-exposed-form-search-results-ctrader-page-3') {
    $form['#action'] = '/' . CTRADER_SEARCH_RESULT_PAGE;
    $form[$search_field_identifier]['#attributes']['placeholder'] = t('Address, MLS #, ZIP, municipality, community');
    $form[$search_field_identifier]['#size'] = 50;
    /* @see https://www.drupal.org/node/2296135 #18 */
    $form[$search_field_identifier]['#id'] = "edit-search-api-aggregation-1-{$form_state['display']->id}";
  }

  if ($form_id == 'views_exposed_form' && strpos($form['#id'], 'views-exposed-form-homepage-view-blocks-page') === 0) {
    $form['#action'] = '';
  }

  // Show only needed fields in index field form (problem with large data in POST).
  if ($form_id == 'search_api_admin_index_fields') {
    foreach ($form['fields'] as $key => $field) {
      if (strpos($key, 'field_reference_to_condo:') !== FALSE) {
        $needs_referenced_fields = array(
          ':field_lp_dol__torcond',
          ':field_s_r__torcond',
          ':field_price_per_sqft__torcond',
          ':field_sqft__torcond',
          ':field_reference_to_condo',
        );
        $delete_field = TRUE;
        foreach ($needs_referenced_fields as $value) {
          if (strpos($key, $value) !== FALSE) {
            $delete_field = FALSE;
          }
        }
        if ($delete_field) {
          unset($form['fields'][$key]);
        }
      }
    }
  }

  // Sets default value for regions hierarchical select in facets-mini-panel.
  if ($form_id == 'hierarchical_select_neighbourhoods_vocabulary_form') {
    if (isset($_GET['region'])) {
      $form['hierarchical_select']['select_subject']['#default_value'] = explode('>', $_GET['region']);
    }
  }
}


/**
 * Implements hook_search_api_ranges_minmax_alter().
 */
function ctrader_saf_search_api_ranges_minmax_alter(&$variables, &$order) {
  if ($variables['range_field'] == 'field_sqft_range_max__torcond') {

  }
}

/**
 * Implements hook_views_pre_view().
 */
function ctrader_saf_views_pre_view(&$view, &$display_id, &$args) {
  switch ($view->name) {
    // Prettify exposed filter GET parameter (sale-rent).
    case 'homepage_view_blocks':
    case 'nearby_listings_view':
    case 'most_viewed':
      switch ($display_id) {
        case 'page_1': // Needs for homepage view blocks and most viewed.
        case 'page_2':
        case 'page_3':
        case 'page_4':
        case 'block_1':
          if (isset($view->display_handler->display->handler->options['filters']['field_s_r_torcond']['group_info']['group_items'])) {
            $group_items = array();
            foreach ($view->display_handler->display->handler->options['filters']['field_s_r_torcond']['group_info']['group_items'] as $key => $value) {
              $group_items[$value['title']] = $value;
              if ($view->display_handler->display->handler->options['filters']['field_s_r_torcond']['group_info']['default_group'] == $key) {
                $view->display_handler->display->handler->options['filters']['field_s_r_torcond']['group_info']['default_group'] = $value['title'];
              }
            }
            $view->display_handler->display->handler->options['filters']['field_s_r_torcond']['group_info']['group_items'] = $group_items;
          }
          elseif (isset($view->display_handler->display->handler->options['filters']['field_s_r__torcond_value']['group_info']['group_items'])) {
            $group_items = array();
            foreach ($view->display_handler->display->handler->options['filters']['field_s_r__torcond_value']['group_info']['group_items'] as $key => $value) {
              $group_items[$value['title']] = $value;
              if ($view->display_handler->display->handler->options['filters']['field_s_r__torcond_value']['group_info']['default_group'] == $key) {
                $view->display_handler->display->handler->options['filters']['field_s_r__torcond_value']['group_info']['default_group'] = $value['title'];
              }
            }
            $view->display_handler->display->handler->options['filters']['field_s_r__torcond_value']['group_info']['group_items'] = $group_items;
          }
          break;
      }
      break;
  }
}

/**
 * Implements hook_search_api_solr_query_alter().
 */
function ctrader_saf_search_api_solr_query_alter(array &$call_args, SearchApiQueryInterface $query) {
  $facet_item = $query->getFilter()->getFilters();
  foreach ($facet_item as $item) {
    if (is_object($item) && is_object(reset($item->getFilters()))) {
      $filters = $item->getFilters();
      $filters = $filters[0]->getFilters();

      // Changes query for range facet (field: sqft).
      // Makes one range form for two fields.
      $sqft_rage_field_name = 'field_sqft_range_max__torcond';
      $sqft_rage_field_name_hidden_secondary = 'field_sqft_range_min__torcond';
      $key_to_write_custom_query = '';
      $min_range_value = $max_range_value = '*';
      if (!empty($filters[0]) && is_array($filters[0]) && $filters[0][0] == $sqft_rage_field_name) {
        if (!empty($filters[0][1])) {
          foreach ($filters as $value) {
            if ($value[0] == $sqft_rage_field_name) {
              if ($value[2] == '>=') {
                $min_range_value = $value[1];
              }
              if ($value[2] == '<=') {
                $max_range_value = $value[1];
              }
            }
          }
          foreach ($call_args['params']['fq'] as $key => $value) {
            if (strpos($value, '{!tag=facet:' . $sqft_rage_field_name . '}') !== FALSE) {
              unset($call_args['params']['fq'][$key]);
              $key_to_write_custom_query = $key;
            }
          }
          $call_args['params']['fq'][$key_to_write_custom_query] = 'is_' . $sqft_rage_field_name . ':[' . $min_range_value . ' TO ' . $max_range_value . '] OR is_' . $sqft_rage_field_name_hidden_secondary . ':[' . $min_range_value . ' TO ' . $max_range_value . ']';

          /**
           * Query examples for range facet.
           *
           * $call_args['params']['fq'][0] = 'is_field_test_range_max:["300" TO "700"] OR is_field_test_range_min:["300" TO "700"]';
           *
           * $call_args['params']['fq'][0] = '{!tag=facet:field_test_range_max}is_field_test_range_max:["300" TO *]';
           * $call_args['params']['fq'][1] = '{!tag=facet:field_test_range_max}is_field_test_range_max:[* TO "700"]';
           */
        }
      }
    }
  }

  if (!empty($facet_item) && isset($facet_item[0]) && is_object($facet_item[0])) {
    foreach ($facet_item as $f_item) {
      if (is_object($f_item)) {
        $f_item = $f_item->getFilters();

        // Changes query for item 'Owned' in field:locker facet.
        // Makes one checkbox for all possible options (except 'None').
        if (!empty($f_item[0]) && is_array($f_item[0]) && $f_item[0][0] == 'field_locker__torcond') {
          if (!empty($f_item[0][1])) {
            $f_item = $f_item[0][1];
            if ($f_item !== 'None') {
              foreach ($call_args['params']['fq'] as $key => $value) {
                if (stripos($value, '{!tag=facet:field_locker__torcond}') !== FALSE) {
                  $call_args['params']['fq'][$key] = '{!tag=facet:field_locker__torcond}ss_field_locker__torcond:("Owned" OR "Exclusive" OR "Ensuite" OR "Ensuite+Owned" OR "Common" OR "Ensuite+Exclusive")';
                }
              }
            }
          }
        }

        // Change facet query for field 'field_br__torcond'.
        if (!empty($f_item[0]) && is_array($f_item[0]) && $f_item[0][0] == 'field_br__torcond') {
          if (!empty($f_item[0][1])) {
            $f_item = $f_item[0][1];
            if ($f_item == 5) {
              foreach ($call_args['params']['fq'] as $key => $value) {
                if (stripos($value, '{!tag=facet:field_br__torcond}') !== FALSE) {
                  $call_args['params']['fq'][$key] = '{!tag=facet:field_br__torcond}is_field_br__torcond:["5" TO *]';
                }
              }
            }
          }
        }

        // Change facet query for field 'field_style__torcond'.
        if (!empty($f_item[0]) && is_array($f_item[0]) && $f_item[0][0] == 'field_style__torcond') {
          if (!empty($f_item[0][1])) {
            $f_item = $f_item[0][1];
            foreach ($call_args['params']['fq'] as $key => $value) {
              if (stripos($value, '{!tag=facet:field_style__torcond}') !== FALSE) {
                $condo_styles = array($f_item);
                switch ($f_item) {
                  case 'Townhouse':
                    $condo_styles = array(
                      '2-Storey',
                      '3-Storey',
                      'Stacked Townhse',
                      'Stacked Townhouse',
                      'Bungalow',
                      'Bungaloft',
                    );
                    break;
                  case 'Apartment':
                    $condo_styles = array(
                      'Apartment',
                      'Multi-Level',
                    );
                    break;
                }
                $condo_styles = implode(' OR ', $condo_styles);
                $call_args['params']['fq'][$key] = "{!tag=facet:field_style__torcond}ss_field_style__torcond:({$condo_styles})";
              }
            }
          }
        }
      }
    }
  }

  if (isset($_GET['polygon'])) { //Draw polygon on map.
    foreach ($call_args['params']['fq'] as $key => $value) {
      if (strpos($value, 'rpts_field_search_point_string:"Intersects(') === 0) {
        $call_args['params']['fq'][$key] = 'rpts_field_search_point_string:"Intersects(POLYGON((' . $_GET['polygon'] . ')))"';
        $changed_polygon_query = TRUE;
      }
    }
    if (!isset($changed_polygon_query)) {
      $call_args['params']['fq'][] = 'rpts_field_search_point_string:"Intersects(POLYGON((' . $_GET['polygon'] . ')))"';
    }
  }
  elseif (isset($_GET['neighbourhoods'])) { //Neighbourhood's polygon select on map.
    $neib_query = '(' . str_replace('-', ' OR ', $_GET['neighbourhoods']) . ')';
    $call_args['params']['fq'][] = 'im_field_city_region__torcond:' . $neib_query;
  }

  if (isset($_GET['region'])) { //Regions selectlist (hierarchical select).
    if (variable_get('term_polygon_search', TRUE)) {
      $term = explode('>', $_GET['region']);
      $term = end($term);
      $neigbourhoods_json = variable_get('ctrader_map_neighbourhood_json');
      foreach ($neigbourhoods_json as $value) {
        if ($value['id'] == $term) {
          $term_data = $value;
        }
      }
      if (isset($term_data)) {
        $call_args['params']['fq'][] = 'rpts_field_search_point_string:"Intersects(' . $term_data['properties']['well_known_text'] . ')"';
      }
      else {
        drupal_set_message(t('Can\'t find region polygon. Search was canceled'), 'warning');
      }
    }
    else {
      $region_query = '(' . str_replace('>', ' AND ', $_GET['region']) . ')';
      $call_args['params']['fq'][] = 'im_field_city_region__torcond$parents_all:' . $region_query;
    }
  }
}


/**
 * Implements hook_facet_items_alter().
 */
function ctrader_saf_facet_items_alter(&$build, &$settings) {
  switch ($settings->facet) {
    case 'field_locker__torcond':
      $replace_this_facet = 'Owned';
      $replaced_facet_count_number = 0;
      foreach ($build as $key => $item) {
        switch ($key) {
          case $replace_this_facet:
            $build[$replace_this_facet]['#markup'] = l(t('Require Locker'), '', array('attributes' => array('class' => array('single-checkbox-facet'))));
            $build[$replace_this_facet]['#html'] = TRUE;
            $build[$replace_this_facet]['#indexed_value'] = t('Require Locker');
            break;
          // Remove this facet item.
          default:
            unset($build[$key]);
            break;
        }
        if ($key != 'None') {
          $replaced_facet_count_number += isset($item['#count']) ? $item['#count'] : 0;
        }
      }
      $build[$replace_this_facet]['#count'] = $replaced_facet_count_number;
      break;
    case 'field_pets__torcond':
      $replace_this_facet = 'Restrict';
      $replaced_facet_count_number = 0;
      foreach ($build as $key => $item) {
        switch ($key) {
          case $replace_this_facet:
            $build[$replace_this_facet]['#markup'] = l(t('Pets Allowed'), '', array('attributes' => array('class' => array('single-checkbox-facet'))));
            $build[$replace_this_facet]['#html'] = TRUE;
            break;
          case 'N':
            unset($build[$key]);
          default;
        }
      }
      break;
    case 'field_br__torcond':
      $adapter = facetapi_adapter_load($settings->searcher);
      $facet = facetapi_facet_load($settings->facet, $settings->searcher);
      $items = $adapter->getActiveItems($facet);
      $item_values = array();
      foreach ($build as $key => $build_item) {
        $build[$key]['#html'] = TRUE;
        $build[$key]['#markup'] = l(t($build_item['#markup']), '');
        if ($build_item['#indexed_value'] > 5) {
          unset($build[$key]);
        }
      }

      foreach ($items as $item) {
        $item_values[] = $item['value'];
      }
      $is_all_link_active = count($items) == 0;
      $all_link_path = $adapter->getFacetPath($facet, $item_values, TRUE);
      $all_link_query = $adapter->getQueryString($facet, $item_values, TRUE);
      $build['any'] = array(
        '#markup' => l(t('Any'), ''),
        '#path' => $all_link_path,
        '#html' => TRUE,
        '#count' => NULL,
        '#indexed_value' => 0,
        '#active' => $is_all_link_active,
        '#item_parents' => array(),
        '#item_children' => array(),
        '#query' => $all_link_query,
      );
      break;
    case 'field_prkg_inc__torcond':
      unset($build['N']);
      $build['Y']['#markup'] = l(t('Require Parking'), '', array('attributes' => array('class' => array('single-checkbox-facet'))));
      $build['Y']['#html'] = TRUE;
      break;
    case 'field_s_r__torcond':
      $build['Lease']['#markup'] = l(t('For rent'), '');
      $build['Sale']['#markup'] = l(t('For sale'), '');
      $build['Sale']['#html'] = $build['Lease']['#html'] = TRUE;

      // Makes this item active on homepage load.
      if (isset($_SESSION['search_link_calculate']['f']) && drupal_get_path_alias() != 'results') {
        foreach ($_SESSION['search_link_calculate']['f'] as $value) {
          if (strpos($value, 'field_s_r__torcond') !== FALSE) {
            $field_search_data = explode(':', $value);
            $build[$field_search_data[1]]['#active'] = TRUE;
          }
        }
      }
      break;
    case 'field_sqft_range_max__torcond':

      break;
    case 'field_style__torcond':
      /*
        - Townhouse (2 Storey, 3-Storey, Stacked Townhouse, Bungalow, Bungaloft)
        - Loft
        - Bachelor/Studio
        - Apartment (Apartment, Multi-level)
        - Parking Spot / Other (Other)
      */
      foreach ($build as $key => $value) {
        switch ($key) {
          case '2-Storey':
          case '3-Storey':
          case 'Stacked Townhse':
          case 'Stacked Townhouse':
          case 'Bungalow':
          case 'Bungaloft':
            if (isset($build['2-Storey'])) {
              $build['2-Storey']['#markup'] = t('Townhouse');
              if ($key != '2-Storey') {
                $build['2-Storey']['#indexed_value'] = 'Townhouse';
                unset($build[$key]);
              }
            }
            elseif (isset($build['3-Storey'])) {
              $build['2-Storey']['#markup'] = t('Townhouse');
              if ($key != '3-Storey') {
                $build['3-Storey']['#indexed_value'] = 'Townhouse';
                unset($build[$key]);
              }
            }
            elseif (isset($build['Stacked Townhse'])) {
              $build['2-Storey']['#markup'] = t('Townhouse');
              if ($key != 'Stacked Townhse') {
                $build['Stacked Townhse']['#indexed_value'] = 'Townhouse';
                unset($build[$key]);
              }
            }
            elseif (isset($build['Stacked Townhouse'])) {
              $build['2-Storey']['#markup'] = t('Townhouse');
              if ($key != 'Stacked Townhouse') {
                $build['Stacked Townhouse']['#indexed_value'] = 'Townhouse';
                unset($build[$key]);
              }
            }
            elseif (isset($build['Bungalow'])) {
              $build['2-Storey']['#markup'] = t('Townhouse');
              if ($key != 'Bungalow') {
                $build['Bungalow']['#indexed_value'] = 'Townhouse';
                unset($build[$key]);
              }
            }
            elseif (isset($build['Bungaloft'])) {
              $build['2-Storey']['#markup'] = t('Townhouse');
              if ($key != 'Bungaloft') {
                $build['Bungaloft']['#indexed_value'] = 'Townhouse';
                unset($build[$key]);
              }
            }
            break;
          case 'Apartment':
          case 'Multi-Level':
            if (isset($build['Apartment'])) {
              if (isset($build['Multi-Level'])) {
                unset($build['Multi-Level']);
              }
            }
            elseif (isset($build['Multi-Level']) && !isset($build['Apartment'])) {
              $build['Multi-Level']['#markup'] = t('Apartment');
              $build['Multi-Level']['#indexed_value'] = 'Apartment';
            }
            break;
          case 'Other':
            $build['Other']['#markup'] = t('Parking Spot / Other');
            break;
          case 'Warehouse Loft':
            unset($build[$key]);
            break;
        }
      }
      break;
    case 'field_patio_ter__torcond':
      foreach ($build as $key => $value) {
        if ($key != 'Open') {
          unset($build[$key]);
        }
        else {
          $build[$key]['#markup'] = l(t('Open Balcony'), '', array('attributes' => array('class' => array('single-checkbox-facet'))));
          $build[$key]['#html'] = TRUE;
        }
      }
      break;
    case 'field_ens_lndry__torcond':
      unset($build['N']);
      $build['Y']['#markup'] = l(t('Ensuite Laundry'), '', array('attributes' => array('class' => array('single-checkbox-facet'))));
      $build['Y']['#html'] = TRUE;
      break;
    case 'field_stories__torcond':
      $allowed_items = array(
        'Bungalow',
        'Low-rise',
        'Mid-rise',
        'High-rise'
      );
      foreach ($build as $key => $value) {
        if (in_array(ucfirst($key), $allowed_items)) {
          $build[$key]['#markup'] = ucfirst($build[$key]['#markup']);
        }
        else {
          unset($build[$key]);
        }
      }

      $adapter = facetapi_adapter_load($settings->searcher);
      $facet = facetapi_facet_load($settings->facet, $settings->searcher);
      $items = $adapter->getActiveItems($facet);
      $item_values = array();
      foreach ($items as $item) {
        $item_values[] = $item['value'];
      }
      $is_all_link_active = count($items) == 0;
      $all_link_path = $adapter->getFacetPath($facet, $item_values, TRUE);
      $all_link_query = $adapter->getQueryString($facet, $item_values, TRUE);
      $new_build['any'] = array(
        '#markup' => t('All'),
        '#path' => $all_link_path,
        '#html' => TRUE,
        '#count' => NULL,
        '#indexed_value' => 0,
        '#active' => $is_all_link_active,
        '#item_parents' => array(),
        '#item_children' => array(),
        '#query' => $all_link_query,
      );
      $new_build['bungalow'] = $build['bungalow'];
      $new_build['low-rise'] = $build['low-rise'];
      $new_build['mid-rise'] = $build['mid-rise'];
      $new_build['high-rise'] = $build['high-rise'];
      $build = $new_build;
  }
}

/**
 * Implements hook_block_info().
 */
function ctrader_saf_block_info() {
  $blocks['ctrader_search_button'] = array(
    'info' => t('Custom block: Search button form'),
  );
  $blocks['neighbourhoods_hs'] = array(
    'info' => t('Hierarchical select for neighbourhoods vocabulary.'),
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function ctrader_saf_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'ctrader_search_button':
      $block['subject'] = t('Block with search button for facet search');
      $block['content'] = _ctrader_saf_blocks_content_function($delta);
      break;
    case 'neighbourhoods_hs':
      $block['subject'] = t('Neighbourhoods hierarchical select.');
      $block['content'] = drupal_get_form('hierarchical_select_neighbourhoods_vocabulary_form');
      break;
  }
  return $block;
}


function _ctrader_saf_blocks_content_function($delta) {
  switch ($delta) {
    case 'ctrader_search_button':
      $alias = drupal_get_path_alias();
      $reset_search_option = TRUE;
      if ($alias == 'main-page') {
        if (isset($_POST['form_id']) && $_POST['form_id'] == '_ctrader_saf_search_button_form') {
          $reset_search_option = FALSE;
        }
        if ($reset_search_option) {
          if (isset($_SESSION['search_link_calculate'])) {
            unset($_SESSION['search_link_calculate']);
          }
          $min_value_sqft = db_query('SELECT MIN(field_sqft_range_min__torcond_value) FROM {field_data_field_sqft_range_min__torcond}')->fetchField();
          $max_value_sqft = db_query('SELECT MAX(field_sqft_range_max__torcond_value) FROM {field_data_field_sqft_range_max__torcond}')->fetchField();
          $min_value_price = round(db_query('SELECT MIN(field_lp_dol__torcond_value) FROM {field_data_field_lp_dol__torcond}')->fetchField());
          $max_value_price = round(db_query('SELECT MAX(field_lp_dol__torcond_value) FROM {field_data_field_lp_dol__torcond}')->fetchField());
          $_SESSION['search_link_calculate']['f'] = array(
            'field_s_r__torcond:Sale',
            'field_sqft_range_max__torcond:[' . $min_value_sqft . ' TO ' . $max_value_sqft . ']',
            'field_lp_dol__torcond:[' . $min_value_price . ' TO ' . $max_value_price . ']',
          );
        }
      }

      $search_button_form = drupal_get_form('_ctrader_saf_search_button_form');

      /* @see ctrader_saf_search_api_solr_query_alter */
      // Map input.
      if (isset($_GET['polygon'])) {
        $search_button_form['geo_loc']['#value'] = "POLYGON(({$_GET['polygon']}))";
      }
      elseif (isset($_GET['neighbourhoods'])) {
        $neighb_array = explode('-', $_GET['neighbourhoods']);
        drupal_add_js(array('chosenNeighbourhoodsTermIds' => $neighb_array), 'setting');
        foreach ($neighb_array as $key => $value) {
          $neighb_array[$key] = 'tid' . $value;
        }
        $search_button_form['geo_loc']['#value'] = implode(', ', $neighb_array);
      }

      // REGION hierarchical selectlist.
      if (isset($_GET['region'])) {
        $regions = explode('>', $_GET['region']);
        $search_button_form['region']['#value'] = isset($regions[0]) ? $regions[0] : NULL;
        $search_button_form['region_1']['#value'] = isset($regions[1]) ? $regions[1] : NULL;
        $search_button_form['region_2']['#value'] = isset($regions[2]) ? $regions[2] : NULL;
      }

      /* @see _ctrader_saf_search_button_form_submit */
      // SALE-RENT facet checkboxes.
      $lease_rent_field_name = 'field_s_r__torcond';
      if (isset($_GET['f'][0])) {
        $lease_rent_facet_query = '';
        $lease_rent_facet_path = '/' . $_GET['q'];
        foreach ($_GET['f'] as $value) {
          if (strpos($value, $lease_rent_field_name) !== FALSE) {
            $lease_rent_facet_query['f'][] = $value;
            $search_button_form['sale_rent']['#value'] = "{$lease_rent_facet_path}?f[0]={$value}";
          }
        }
      }

      // PETS facet checkboxes.
      $pets_field_name = 'field_pets__torcond';
      if (isset($_GET['f'][0])) {
        foreach ($_GET['f'] as $value) {
          if (strpos($value, $pets_field_name) !== FALSE) {
            $search_button_form['pets']['#value'] = '1';
          }
        }
      }

      // LOCKER facet checkboxes.
      $locker_field_name = 'field_locker__torcond';
      if (isset($_GET['f'][0])) {
        foreach ($_GET['f'] as $value) {
          if (strpos($value, $locker_field_name) !== FALSE) {
            $search_button_form['locker']['#value'] = '1';
          }
        }
      }

      // PARKING facet checkboxes.
      $parking_field_name = 'field_prkg_inc__torcond';
      if (isset($_GET['f'][0])) {
        foreach ($_GET['f'] as $value) {
          if (strpos($value, $parking_field_name) !== FALSE) {
            $search_button_form['prkg']['#value'] = '1';
          }
        }
      }

      // BALCONY facet checkboxes.
      $balcony_field_name = 'field_patio_ter__torcond';
      if (isset($_GET['f'][0])) {
        foreach ($_GET['f'] as $value) {
          if (strpos($value, $balcony_field_name) !== FALSE) {
            $search_button_form['patio']['#value'] = '1';
          }
        }
      }

      // LAUNDRY facet checkboxes.
      $laundry_field_name = 'field_ens_lndry__torcond';
      if (isset($_GET['f'][0])) {
        foreach ($_GET['f'] as $value) {
          if (strpos($value, $laundry_field_name) !== FALSE) {
            $search_button_form['ens']['#value'] = '1';
          }
        }
      }

      // BEDS facet checkboxes.
      $beds_field_name = 'field_br__torcond';
      if (isset($_GET['f'][0])) {
        foreach ($_GET['f'] as $value) {
          if (strpos($value, $beds_field_name) !== FALSE) {
            $value = str_replace("{$beds_field_name}:", '', $value);
            if (is_numeric($value)) {
              $search_button_form['beds']['#value'] = $value;
            }
          }
        }
      }

      // STORIES(BUILDING STYLE) facet selectlist.
      $stories_field_name = 'field_stories__torcond';
      if (isset($_GET['f'][0])) {
        foreach ($_GET['f'] as $value) {
          if (strpos($value, $stories_field_name) !== FALSE) {
            $value = str_replace("{$stories_field_name}:", '', $value);
            $search_button_form['type']['#value'] = $value;
          }
        }
      }

      // TYPE facet selectlist.
      $type_field_name = 'field_style__torcond';
      if (isset($_GET['f'][0])) {
        foreach ($_GET['f'] as $value) {
          if (strpos($value, $type_field_name) !== FALSE) {
            $value = str_replace("{$type_field_name}:", '', $value);
            $search_button_form['type']['#value'] = $value;
          }
        }
      }

      // PRICE facet slider.
      $price_field_name = 'field_lp_dol__torcond';
      if (isset($_GET['f'][0])) {
        foreach ($_GET['f'] as $value) {
          if (strpos($value, $price_field_name) !== FALSE) {
            $value = str_replace(array(
              "{$price_field_name}:[",
              " TO",
              "]"
            ), '', $value);
            $value = explode(' ', $value);
            $search_button_form['price_min']['#value'] = $value[0];
            $search_button_form['price_max']['#value'] = $value[1];
          }
        }
      }

      // SIZE facet slider.
      $size_field_name = 'field_sqft_range_max__torcond';
      if (isset($_GET['f'][0])) {
        foreach ($_GET['f'] as $value) {
          if (strpos($value, $size_field_name) !== FALSE) {
            $value = str_replace(array(
              "{$size_field_name}:[",
              " TO",
              "]"
            ), '', $value);
            $value = explode(' ', $value);
            $search_button_form['size_min']['#value'] = $value[0];
            $search_button_form['size_max']['#value'] = $value[1];
          }
        }
      }

      return $search_button_form;
  }
}


/**
 * Form wit "SEARCH" button on homepage.
 */
function _ctrader_saf_search_button_form($form, &$form_state) {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
//    '#disabled' => TRUE,
  );
  $form['geo_loc'] = array(
    '#type' => 'hidden',
  );

  //Have added hidden inputs for facet filter.
  $form['sale_rent'] = array(
    '#type' => 'hidden',
  );

  if (drupal_is_front_page()) {
    $form['sale_rent']['#default_value'] = '/?f[0]=field_s_r__torcond:Sale';
  }

  $form['region'] = array(
    '#type' => 'hidden',
  );

  $form['region_1'] = array(
    '#type' => 'hidden',
  );

  $form['region_2'] = array(
    '#type' => 'hidden',
  );

  $form['prkg'] = array(
    '#type' => 'hidden',
  );

  $form['price_min'] = array(
    '#type' => 'hidden',
  );

  $form['price_max'] = array(
    '#type' => 'hidden',
  );

  $form['size_min'] = array(
    '#type' => 'hidden',
  );

  $form['size_max'] = array(
    '#type' => 'hidden',
  );

  $form['pets'] = array(
    '#type' => 'hidden',
  );

  $form['type'] = array(
    '#type' => 'hidden',
  );

  $form['locker'] = array(
    '#type' => 'hidden',
  );

  $form['beds'] = array(
    '#type' => 'hidden',
  );

  $form['patio'] = array(
    '#type' => 'hidden',
  );

  $form['ens'] = array(
    '#type' => 'hidden',
  );

  $form['stories'] = array(
    '#type' => 'hidden',
  );

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'ctrader_saf') . '/js/rewritten_facetapi.js',
  );
  return $form;
}


function _ctrader_saf_search_button_form_submit($form, &$form_state) {
//  $query = drupal_http_build_query($_SESSION['search_link_calculate']['f'],'f');
  if (!empty($form['#token'])) {
    $form_state['input']['form_token'] = drupal_get_token($form['#token']);
  }
  $path = '/' . CTRADER_SEARCH_RESULT_PAGE;
  $query = array();

  /* @see _ctrader_saf_blocks_content_function */
  // Map search.
  if (strpos($form_state['values']['geo_loc'], 'POLYGON') === 0) {
    $polygon_string = str_replace(array(
      'POLYGON((',
      '))',
    ), '', $form_state['values']['geo_loc']);
    $polygon_array = explode(',', $polygon_string);
    foreach ($polygon_array as $key => $value) {
      $value_array = explode(' ', $value);
      foreach ($value_array as $c_key => $c_value) {
        $value_array[$c_key] = round($c_value, 5);
      }
      $polygon_array[$key] = implode(' ', $value_array);
    }
    $polygon_string = implode(',', $polygon_array);
    $query['polygon'] = $polygon_string;
  }
  elseif (strpos($form_state['values']['geo_loc'], 'tid') === 0) {
    $tids = str_replace('tid', '', $form_state['values']['geo_loc']);
    $tids = str_replace(', ', '-', $tids);

    // Checks if it is duplicates in neighbourhoods search input.
    // And if there are duplicates - delete those tids from query.
    $tids_array = explode('-', $tids);
    $duplicates = array();
    $new_tids = array();
    foreach ($tids_array as $key => $value) {
      if (in_array($value, $new_tids)) {
        $duplicates[] = $value;
      }
      else {
        $new_tids[] = $value;
      }
    }
    foreach ($tids_array as $key => $value) {
      if (in_array($value, $duplicates)) {
        unset($tids_array[$key]);
      }
    }
    $tids = implode('-', $tids_array);
    if (!empty($tids)) {
      $query['neighbourhoods'] = $tids;
    }
  }

  // SALE-RENT facet checkboxes.
  $lease_rent_field_name = 'field_s_r__torcond';
  if (strpos($form_state['values']['sale_rent'], $lease_rent_field_name) !== FALSE) {
    $facet_url = drupal_parse_url($form_state['values']['sale_rent']);
    $query['f'][] = array_pop($facet_url['query']['f']);
  }

  // PETS facet checkboxes.
  $pets_field_name = 'field_pets__torcond';
  if ($form_state['values']['pets']) {
    $query['f'][] = "{$pets_field_name}:Restrict";
  }

  // LOCKER facet checkboxes.
  $locker_field_name = 'field_locker__torcond';
  if ($form_state['values']['locker']) {
    $query['f'][] = "{$locker_field_name}:Owned";
  }

  // PARKING facet checkboxes.
  $parking_field_name = 'field_prkg_inc__torcond';
  if ($form_state['values']['prkg']) {
    $query['f'][] = "{$parking_field_name}:Y";
  }

  // BALCONY facet checkboxes.
  $balcony_field_name = 'field_patio_ter__torcond';
  if ($form_state['values']['patio']) {
    $query['f'][] = "{$balcony_field_name}:Open";
  }

  // LAUNDRY facet checkboxes.
  $laundry_field_name = 'field_ens_lndry__torcond';
  if ($form_state['values']['ens']) {
    $query['f'][] = "{$laundry_field_name}:Y";
  }

  // BEDS facet checkboxes.
  $beds_field_name = 'field_br__torcond';
  if (is_numeric($form_state['values']['beds'])) {
    $query['f'][] = "{$beds_field_name}:{$form_state['values']['beds']}";
  }

  // STORIES(BUILDING STYLE) facet selectlist.
  $stories_field_name = 'field_stories__torcond';
  if ($form_state['values']['stories'] && $form_state['values']['stories'] != 'All') {
    $query['f'][] = "{$stories_field_name}:{$form_state['values']['stories']}";
  }

  // TYPE facet selectlist.
  $type_field_name = 'field_style__torcond';
  if ($form_state['values']['type']) {
    $query['f'][] = "{$type_field_name}:{$form_state['values']['type']}";
  }

  // PRICE facet slider.
  $price_field_name = 'field_lp_dol__torcond';
  if ($form_state['values']['price_max']) {
    $price_min_input = $form_state['values']['price_min'] ? $form_state['values']['price_min'] : 0;
    $query['f'][] = "{$price_field_name}:[{$price_min_input} TO {$form_state['values']['price_max']}]";
  }

  // SIZE facet slider.
  $size_field_name = 'field_sqft_range_max__torcond';
  if ($form_state['values']['size_max']) {
    $size_min_input = $form_state['values']['size_min'] ? $form_state['values']['size_min'] : 0;
    $query['f'][] = "{$size_field_name}:[{$size_min_input} TO {$form_state['values']['size_max']}]";
  }

  // REGION facet selectlist.
  /* @see ctrader_saf_search_api_solr_query_alter */
  $region_field_name = 'field_city_region__torcond%3Aparents_all';
  if (ENABLE_PRETTY_PATH_FOR_REGION_DROPDOWN_FACET === TRUE) {
    $region_term_names = '';
    if (!empty($form_state['values']['region'])) {
      $term = taxonomy_term_load($form_state['values']['region']);
      $region_term_names .= "/{$term->name}";
      if (!empty($form_state['values']['region_1'])) {
        $term = taxonomy_term_load($form_state['values']['region_1']);
        $region_term_names .= "/{$term->name}";
        if (!empty($form_state['values']['region_2'])) {
          $term = taxonomy_term_load($form_state['values']['region_2']);
          $region_term_names .= "/{$term->name}";
        }
      }
    }
    if ($region_term_names) {
      $path .= $region_term_names;
    }
  }
  else {
    $region_term_id = '';
    if (!empty($form_state['values']['region'])) {
      $region_term_id .= $form_state['values']['region'];
      if (!empty($form_state['values']['region_1'])) {
        $region_term_id .= '>' . $form_state['values']['region_1'];
        if (!empty($form_state['values']['region_2'])) {
          $region_term_id .= '>' . $form_state['values']['region_2'];
        }
      }
    }
    if ($region_term_id) {
      $query['region'] = $region_term_id;
    }
  }

  $url = url($path, array(
    'query' => $query,
    'absolute' => TRUE
  ));
  $form_state['redirect'] = $url;
}


/**
 * Form with hierarchical select for neighbourhoods vocabulary.
 */
function hierarchical_select_neighbourhoods_vocabulary_form($form, &$form_state) {
  $form['hierarchical_select'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div id="hierarchical_select" class="hierarchical_select_wrapper">',
    '#suffix' => '</div>',
    '#attributes' => array(
      'class' => array(
        'hierarchical-select',
        'neighbourhoods-hierarchical',
      ),
    ),
  );

  $vocab = taxonomy_vocabulary_machine_name_load('neighbourhoods');
  // There are some hidden terms by js. @see facets_script.js


  $vid = $vocab->vid;

  $form['hierarchical_select']['select_subject'] = array(
    '#type' => 'hierarchical_select',
    '#title' => t('Location:'),
    '#size' => 1,
    '#config' => array(
      'module' => 'hs_taxonomy',
      'params' => array(
        'vid' => $vid //The vocab id
      ),
      'save_lineage' => 1,
      'enforce_deepest' => 0,
      'entity_count' => 0,
      'require_entity' => 0,
      'resizable' => 0,
      'level_labels' => array(
        'status' => 1,
        'labels' => array(
          0 => t('All Areas'),
          1 => t('All Municipalities'),
          2 => t('All Communities'),
        ),
      ),
      'dropbox' => array(
        'status' => 0,
        'title' => t('All selections'),
        'limit' => 0,
        'reset_hs' => 1,
      ),
      'editability' => array(
        'status' => 0,
        'item_types' => array(),
        'max_levels' => 3,
      ),
      'animation_delay' => 600,
      'special_items' => array(),
      'render_flat_select' => 1,
      'path' => 'hierarchical_select_json',
    ),
    '#default_value' => 0,
  );
  return $form;
}


/**
 * @return null|string
 */
function _ctrader_saf_search_link_calculate_page_callback() {
//  unset($_SESSION['search_link_calculate_results_page']);
  if (!isset($_SESSION['search_link_calculate']['f'])) {
    $_SESSION['search_link_calculate']['f'] = array();
  }

  $set_search_option = TRUE;
  foreach ($_SESSION['search_link_calculate']['f'] as $key => $value) {
    if ($value == $_POST['/main-page?f'][0]) {
      unset($_SESSION['search_link_calculate']['f'][$key]);
      $set_search_option = FALSE;
    }

    // For sale-lease facet.
    if (strpos($value, 'field_s_r__torcond') !== FALSE && strpos($_POST['/main-page?f'][0], 'field_s_r__torcond') !== FALSE) {
      $_SESSION['search_link_calculate']['f'][$key] = $_POST['/main-page?f'][0];
      return t('page not for viewing');
    }

    // For beds facet.
    if (strpos($value, 'field_br__torcond') !== FALSE && strpos($_POST['/main-page?f'][0], 'field_br__torcond') !== FALSE) {
      $_SESSION['search_link_calculate']['f'][$key] = $_POST['/main-page?f'][0];
      return t('page not for viewing');
    }
  }
  if ($set_search_option) {
    if (isset($_POST['/main-page?f'][0])) {
      $_SESSION['search_link_calculate']['f'][] = $_POST['/main-page?f'][0];
      unset($_POST['/main-page?f']);
    }
    if (isset($_POST['/' . CTRADER_SEARCH_RESULT_PAGE . '?f'][0])) {
      $_SESSION['search_link_calculate']['f'][] = $_POST['/' . CTRADER_SEARCH_RESULT_PAGE . '?f'][0];
      unset($_POST['/' . CTRADER_SEARCH_RESULT_PAGE . '?f']);
    }
    if (isset($_POST['f'])) {
      $_SESSION['search_link_calculate']['f'][] = $_POST['f'][1];
      unset($_POST['f']);
    }
  }
  sort($_SESSION['search_link_calculate']['f']);
  return t('page not for viewing');
}


/**
 * Rewrites default submit function for facet range form (field_lp_dol__torcond).
 *
 * @param $form
 * @param $form_state
 */
function _ctrader_saf_range_ajax_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $range_field = $form_state['input']['range-field'];

  // Prepare params and existing filter $pos (if any)
  $params = drupal_get_query_parameters($_GET, array('q', 'page'));

  // Get pretty path path and goto()
  if (drupal_multilingual() && variable_get('locale_language_negotiation_url_part') == LOCALE_LANGUAGE_NEGOTIATION_URL_PREFIX) {
    list($language, $path) = language_url_split_prefix(request_path(), language_list());
    $language = $language ? $language : NULL;
  }
  else {
    $path = request_path();
    $language = NULL;
  }
  if (module_exists('facetapi_pretty_paths')) {
    $exists = FALSE;
    $split_path = explode('/', $path);
    foreach ($split_path as $key => $value) {
      if ($value == $range_field) {
        $exists = $split_path[$key + 1];
      }
    }

    // Decision: replace existing range or add new
    $new_range = '[' . $values['range-from'] . ' TO ' . $values['range-to'] . ']';
    if ($exists) {
      $path = str_replace($exists, $new_range, $path);
    }
    else {
      $path .= '/' . $range_field . '/' . $new_range;
    }

    // Unset non-pretty query
    unset($params['f']);
  }
  else {
    // Not pretty path logic
    $query = $range_field . ':' . '[' . $values['range-from'] . ' TO ' . $values['range-to'] . ']';

    $pos = -1;
    if (isset($params['f'])) {
      foreach ($params['f'] as $key => $param) {
        if (strpos($param, $range_field . ':') !== FALSE) {
          $pos = $key;
        }
      }
    }

    if ($pos != -1) {
      $params['f'][$pos] = $query;
    }
    else {
      $params['f'][] = $query;
    }
  }


  /******************** added code *****************************/
  if (isset($_SESSION['search_link_calculate']['f'])) {
    $not_in_search_query = TRUE;
    foreach ($_SESSION['search_link_calculate']['f'] as $key => $value) {
      if (strpos($value, $range_field) !== FALSE) {
        $_SESSION['search_link_calculate']['f'][$key] = $query;
        $not_in_search_query = FALSE;
      }
    }
    if ($not_in_search_query) {
      $_SESSION['search_link_calculate']['f'][] = $query;
    }
  }
  else {
    $_SESSION['search_link_calculate']['f'][] = $query;
  }
}


/**
 * Implements hook_search_api_solr_search_results_alter().
 */
function ctrader_saf_search_api_solr_search_results_alter(array &$results, SearchApiQueryInterface $query, $response) {
  $alias = drupal_get_path_alias();
  if (($alias == 'main-page' || $alias == '')) {
//    unset($_SESSION['default_solrsearch_results']);
//    $_SESSION['default_solrsearch_results'] = $results;
  }
  if ($results['result count'] == 0) {

  }
}


/**
 * Implements hook_facetapi_empty_behaviors().
 */
function ctrader_saf_facetapi_empty_behaviors() {
  return array(
    'ctrader_facet_empty_behaviors' => array(
      'handler' => array(
        'label' => t('@ctrader facet empty behavior', array('@ctrader' => 'CTrader')),
        'class' => 'FacetapiEmptyBehaviorCtrader',
      ),
    ),
  );
}


/**
 * Implements hook_facetapi_widgets().
 */
function ctrader_saf_facetapi_widgets() {
  return array(
    'ctrader_range_widget' => array(
      'handler' => array(
        'label' => t('@ctrader range', array('@ctrader' => 'CondosTrader')),
        'class' => 'SearchApiCtraderRangesWidgetUISlider',
        'query types' => array('term', 'numeric_range'),
      ),
    ),
    'ctrader_facetapi_select_dropdowns' => array(
      'handler' => array(
        'label' => t('Ctrader Select Field (Dropdowns)'),
        'class' => 'CtraderFacetapiSelectDropdowns',
        'query types' => array('term', 'date'),
      ),
    ),
  );
}


/**
 * Implements hook_forms().
 */
function ctrader_saf_forms($form_id) {
  // Build all multiselect facet forms on the page using the same form
  // callback.
  $forms = array();
  if (strpos($form_id, '_ctrader_saf_facetapi_select_facet_form_') === 0) {
    $forms[$form_id]['callback'] = '_ctrader_saf_facetapi_select_facet_form';
  }
  return $forms;
}


function _ctrader_saf_facetapi_select_facet_form($form, &$form_state, $variables) {
  if (!empty($variables['options'])) {
    $form['facets'] = array(
      '#type' => 'select',
      '#default_value' => '',
      '#options' => $variables['options'],
      '#attributes' => array(
        'class' => array('ctrader-facetapi-select'),
      ),
      '#attached' => array(
        'js' => array(
          drupal_get_path('module', 'ctrader_saf') . '/js/rewritten_facetapi_select.js',
        ),
      ),
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#attributes' => array('class' => array('ctrader-facetapi-select-submit')),
      '#value' => t('Submit'),
    );
  }

  if (!empty($variables['default_option_label'])) {
    $form['facets']['#empty_option'] = $variables['default_option_label'];
  }

  return $form;
}

/**
 * Submit function for _ctrader_saf_facetapi_select_facet_form().
 */
function _ctrader_saf_facetapi_select_facet_form_submit($form, &$form_state) {
  if (isset($form_state['values']['facets'])) {
    $parsed_url = drupal_parse_url($form_state['values']['facets']);
  }
//  drupal_goto($parsed_url['path'], array('query' => $parsed_url['query']));
}

/**
 * Submit handlers for settings form of facet filters.
 */
function _ctrader_saf_facet_settings_form_submit($form, $form_state) {
  $values = $form_state['values'];
  if (empty($values['widget']) || $values['widget'] != 'ctrader_facetapi_select_dropdowns') {
    return;
  }
  // Getting the Facet identifier.
  $key = $form['#facetapi']['facet']['name'];

  // Update the i18n string for the "Default Option" label.
  $string = $values['default_option_label'];
  CtraderFacetapiSelectDropdowns::updateLabelTranslation('default_option_label', $string, $key);

  // Update the i18n string for the "Reset Option" label.
  $string = $values['reset_option_label'];
  CtraderFacetapiSelectDropdowns::updateLabelTranslation('reset_option_label', $string, $key);
}

/**
 * Implements hook_search_api_solr_field_mapping_alter().
 */
function ctrader_saf_search_api_solr_field_mapping_alter(SearchApiIndex $index, array &$fields) {
  $field_name = 'field_search_point_string';
  if (isset($fields[$field_name])) {
    $fields[$field_name] = 'rpts_' . $field_name;
  }
}

/**
 * @file
 * Performs min/max queries through Search API
 * and provides UI Slider display widget for Facet API
 */

/**
 * Implements hook_theme().
 */
function ctrader_saf_theme() {
  $themes = array(
    'ctrader_search_api_ranges_slider' => array(
      'variables' => array('slider' => ''),
      'file' => 'ctrader_search_api_ranges.theme.inc',
    ),
    'ctrader_search_api_ranges_block_slider_view_form' => array(
      'template' => 'ctrader-search-api-ranges-block-slider-view-form',
      'render element' => 'form',
    ),
  );
  return $themes;
}

/**
 * Implements hook_search_api_index_items_alter().
 */
function ctrader_saf_search_api_index_items_alter(array &$items, SearchApiIndex $index) {
  switch ($index->machine_name) {
    case 'toronto_condo_index':
      // Rewrites field value before indexing.
      foreach ($items as $key => $value) {
        if (isset($value->field_stories__torcond[LANGUAGE_NONE][0]['value'])) {
          /*
              - All
              - Bungalow ( db field value = 1)
              - Low-rise 1 to 4 stories (db field value = 1 to 4)
              - Mid-rise 5 to 10 stories (db field value = 5 to 10)
              - High-rise 10 stories + (db field value 10+)
          */
          $field_val = $value->field_stories__torcond[LANGUAGE_NONE][0]['value'];
          if (strpos($field_val, '/') === FALSE) {
            $field_val_int = intval(filter_var($field_val, FILTER_SANITIZE_NUMBER_INT));
            if ($field_val_int == 1) {
              $items[$key]->field_stories__torcond[LANGUAGE_NONE][0]['value'] = 'Bungalow';
            }
            elseif ($field_val_int > 1 && $field_val_int < 5) {
              $items[$key]->field_stories__torcond[LANGUAGE_NONE][0]['value'] = 'Low-rise';
            }
            elseif ($field_val_int >= 5 && $field_val_int <= 10) {
              $items[$key]->field_stories__torcond[LANGUAGE_NONE][0]['value'] = 'Mid-rise';
            }
            elseif ($field_val_int >= 10) {
              $items[$key]->field_stories__torcond[LANGUAGE_NONE][0]['value'] = 'High-rise';
            }
            else {
//              $items[$key]->field_stories__torcond[LANGUAGE_NONE][0]['value'] = 'Else';
            }
          }
        }
      }
      break;
  }
}


