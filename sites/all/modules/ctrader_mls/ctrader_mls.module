<?php
/**
 * Created by PhpStorm.
 * User: aryan
 * Date: 03.04.16
 * Time: 15:50
 */


/**
 * Implements hook_init().
 */
function ctrader_mls_init() {

}

/**
 * Implements hook_menu().
 */
function ctrader_mls_menu() {
  $items['admin/config/mls'] = array(
    'title' => 'Mls integration page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ctrader_mls_form'),
    'access arguments' => array('administer modules'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/rets'] = array(
    'title' => 'RETS settings page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ctrader_mls_rets_data_form'),
    'access arguments' => array('administer modules'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['rets-connection-test'] = array(
    'title' => 'RETS connection',
    'page callback' => '_rets_connection_test',
    'access arguments' => array('administer modules'),
    'file' => 'inc/ctrader_mls.rets_connection.inc',
  );
//  $items['rets-xml-parser'] = array(
//    'title' => 'RETS xml parser',
//    'page callback' => '_rets_xml_parser',
//    'access arguments' => array('administer modules'),
//    'file' => 'inc/ctrader_mls.rets_xml_parser.inc',
//    'type' => MENU_NORMAL_ITEM,
//  );
  $items['import-condo-xml'] = array(
    'title' => 'Import data from XML file',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xml_import_form'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'main-menu',
  );

  return $items;
}

/**
 * Form for configure integration drupal and mls.
 */
function ctrader_mls_form($form, &$form_state) {
  $form['mls_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => variable_get('mls_username', ''),
  );

  $form['mls_password'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
  );

  return system_settings_form($form);
}

/**
 * Form for configure RETS server login data.
 */
function ctrader_mls_rets_data_form($form, &$form_state) {
  $form['rets_login_url'] = array(
    '#type' => 'textfield',
    '#title' => t('RETS login url'),
    '#default_value' => variable_get('rets_login_url', ''),
  );

  $form['rets_username'] = array(
    '#type' => 'textfield',
    '#title' => t('RETS username'),
    '#default_value' => variable_get('rets_username', ''),
  );

  $form['rets_password'] = array(
    '#type' => 'textfield',
    '#title' => t('RETS password'),
    '#default_value' => variable_get('rets_password', ''),

  );

  $form['rets_user_agent'] = array(
    '#type' => 'textfield',
    '#title' => t('RETS user agent'),
    '#default_value' => variable_get('rets_user_agent', ''),
  );

  $form['rets_user_agent_password'] = array(
    '#type' => 'textfield',
    '#title' => t('RETS user agent password'),
    '#default_value' => variable_get('rets_user_agent_password', ''),

  );

  return system_settings_form($form);
}


/**
 * Implements hook_libraries_info().
 */
function ctrader_mls_libraries_info() {
  $libraries['torontomlsapi'] = array(
    'name' => 'Torontomlsapi',
    'vendor url' => 'https://github.com/tamtranvn2012/torontomlsapi',
    'download url' => 'https://github.com/tamtranvn2012/torontomlsapi/archive/master.zip',
    'version arguments' => array(
      'file' => 'phrets.php',
      'pattern' => '@version\s+([0-9a-zA-Z\.-]+)@',
    ),
    'files' => array(
      'php' => array(
        'phrets.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Large XML import form.
 */
function xml_import_form() {
  $form = array();

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Start import'),
  );

  return $form;
}

/**
 * Large XML import start.
 */
function xml_import_form_submit($form, &$form_state) {
  $batch = array(
    'operations' => array(
      array('large_xml_import_operation', array()),
    ),
    'finished' => 'large_xml_import_finished',
    'title' => t('Processing large XML'),
    'init_message' => t('Large XML Batch is starting.'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Large XML Batch has encountered an error.'),
  );
  batch_set($batch);
}

/**
 * Large XML test operation.
 */
function large_xml_import_operation(&$context) {
  $folder_with_data_to_import = file_default_scheme() . '://import_data/06_04_16/cnd_data';
  $condos = array();
//  $xml = simplexml_load_file(drupal_get_path('module', 'ctrader_mls') . '/files/cnd_test_xml/test_condo.xml');
  $xml = simplexml_load_file($folder_with_data_to_import . '/cnd.xml');

  foreach ($xml->REData->REProperties->CondoProperty as $condo) {
    $condos[] = $condo;
  }

  $condo_count = count($condos);

  $items_per_pass = 100;

  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current'] = 0;
    $context['sandbox']['max'] = $condo_count;
  }

  $records = array_slice($condos, $context['sandbox']['current'], $items_per_pass);

  if (!empty($records)) {
    $last_item = -1;

    $connection = entity_load('drealty_connection_entity', array('toronto_rets_connection'));
    $connection = end($connection);
    $field_mappings = $connection->FetchFieldMappings();

    $dc = new drealtyConnection();
    if ($dc->connect($connection->conid)) {
      $fields_metadata = $dc->rets->GetMetadataTable("Property", "CondoProperty");
      if ($fields_metadata) {
        $items = array();
        foreach ($records as $key => $condo) {
          $last_item = $key;
          $ml_num = $condo->Listing->MLS->__toString();

          $item = entity_create('drealty_listing', array(
            'id' => NULL,
            'type' => 'toronto_condo',
            'conid' => NULL,
            'hash' => NULL,
            'process_images' => NULL,
            'rets_imported' => FALSE,
            'status' => NULL,
            'rets_key' => $ml_num,
            'rets_id' => $ml_num,
            'class' => NULL,
            'active' => NULL,
            'label' => $condo->Listing->Address->__toString() != 'null' ? $condo->Listing->Address->__toString() : $ml_num,
            'created' => REQUEST_TIME,
            'changed' => REQUEST_TIME,
          ));


          // For photos import.
          // Add data to image field.
          if (!$_SESSION['media_files']) {
            $dir = $folder_with_data_to_import . '/cnd_media';
            $_SESSION['media_files'] = scandir($dir, 1);
            $_SESSION['media_files']['dir'] = $dir;
          }
          $sort_filenames = array();
          foreach ($_SESSION['media_files'] as $m_file) {
            if (strpos($m_file, $ml_num)) {
              $sort_filenames[] = $m_file;
            }
          }
          sort($sort_filenames, SORT_NATURAL | SORT_FLAG_CASE);
          $item_media_files_list = array();
          foreach ($sort_filenames as $file_name) {
            $file_data = array(
              'filename' => $file_name,
              'filepath' => $_SESSION['media_files']['dir'] . '/' . $file_name,
              'filemime' => file_get_mimetype($_SESSION['media_files']['dir'] . '/' . $file_name),
            );
            $item_media_files_list[] = $file_data;
          }
          if (!empty($item_media_files_list)) {
            foreach ($item_media_files_list as $item_file) {
              $image_info = image_get_info($item_file['filepath']);
              $file = file_save_data(file_get_contents($item_file['filepath']), file_default_scheme() . '://condo_media/' . basename($item_file['filepath']));
              $file->status = 1;
              $file->filesize = $image_info['file_size'];
              $file->height = $image_info['height'];
              $file->width = $image_info['width'];
              $file->timestamp = time();
              $file->alt = $ml_num . t(' image');
              $file->title = $item_file['filename'];
              $item->field_toronto_gallery[LANGUAGE_NONE][] = (array) $file;
            }
          }


          foreach ($field_mappings as $mapping) {
            $ftype = $mapping->field_api_type;
            switch ($ftype) {
              case 'text':
                foreach ($fields_metadata as $field_data) {
                  if ($mapping->systemname == $field_data['SystemName']) {
                    $field_standart_name = $field_data['StandardName'];
                    $field_value = $condo->Listing->{$field_standart_name}->__toString() == 'null' ? '' : $condo->Listing->{$field_standart_name}->__toString();

                    $item->{$mapping->field_name}[LANGUAGE_NONE][0]['value'] = isset($field_value) ? $field_value : NULL;
                  }
                }
                break;
              case 'number_integer':
              case 'number_decimal':
              case 'number_float':
                foreach ($fields_metadata as $field_data) {
                  if ($mapping->systemname == $field_data['SystemName']) {
                    $field_standart_name = $field_data['StandardName'];
                    $field_value = $condo->Listing->{$field_standart_name}->__toString();

                    $item->{$mapping->field_name}[LANGUAGE_NONE][0]['value'] = isset($field_value) ? $field_value : NULL;
                  }
                }
                break;
              case 'text_long':
                foreach ($fields_metadata as $field_data) {
                  if ($mapping->systemname == $field_data['SystemName']) {
                    $field_standart_name = $field_data['StandardName'];
                    $field_value = $condo->Listing->{$field_standart_name}->__toString();

                    $item->{$mapping->field_name}[LANGUAGE_NONE][0]['value'] = isset($field_value) ? $field_value : NULL;
                    $item->{$mapping->field_name}[LANGUAGE_NONE][0]['format'] = 'plain_text';
                  }
                }
                break;
            }
          }
          $items[] = $item;
        }

        foreach ($items as $entity_presave) {
          $entity_presave->save();
        }
      }
    }

    $context['sandbox']['current'] = $context['sandbox']['progress'] + $last_item + 1;
    $context['sandbox']['progress'] += count($records);

    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
    if ($context['finished'] >= 1) {
      unset($_SESSION['media_files']);
      $context['finished'] = 1;
    }
//    if ($context['sandbox']['progress'] > 8) {
//      unset($_SESSION['media_files']);
//      $context['finished'] = 1;
//    }
  }
}

/**
 * Batch finished callback.
 */
function large_xml_import_finished($success, $results, $operations) {
  if ($success) {
    $message = t('Import successful finished.');
  }
  else {
    $message = t('Finished with an error.');
  }

  drupal_set_message($message);
}
