<?php
/**
 * Created by PhpStorm.
 * User: aryan
 * Date: 03.04.16
 * Time: 15:50
 */

define('DREALTY_ENTITY_TYPE', 'drealty_listing');
define('TORONTO_BUILDING', 'toronto_building');
define('TORONTO_CONDO', 'toronto_condo');

// alias for search result page.
define('CTRADER_SEARCH_RESULT_PAGE', 'search-results');


/**
 * Implements hook_init().
 */
function ctrader_mls_init() {
  _ctrader_mls_detect_user_geolocation();
}

/**
 * Implements hook_menu().
 */
function ctrader_mls_menu() {
  $items['admin/config/mls'] = array(
    'title' => 'Mls integration page',
    'page callback' => '_ctrader_mls_mls_page_callback',
    'access arguments' => array('administer modules'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/rets'] = array(
    'title' => 'RETS settings page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ctrader_mls_rets_data_form'),
    'access arguments' => array('administer modules'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['rets-connection-test'] = array(
    'title' => 'RETS connection',
    'page callback' => '_rets_connection_test',
    'access arguments' => array('administer modules'),
    'file' => 'inc/ctrader_mls.rets_connection.inc',
  );
//  $items['rets-xml-parser'] = array(
//    'title' => 'RETS xml parser',
//    'page callback' => '_rets_xml_parser',
//    'access arguments' => array('administer modules'),
//    'file' => 'inc/ctrader_mls.rets_xml_parser.inc',
//    'type' => MENU_NORMAL_ITEM,
//  );
//  $items['import-condo-xml'] = array(
//    'title' => 'Import data from XML file',
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('xml_import_form'),
//    'access callback' => TRUE,
//    'type' => MENU_NORMAL_ITEM,
//    'menu_name' => 'main-menu',
//  );
  return $items;
}

/**
 * Callback function for 'admin/config/mls' page.
 */
function _ctrader_mls_mls_page_callback() {
  $output['ctrader_mls_form'] = drupal_get_form('ctrader_mls_form');
  $output['check_not_active_listings'] = drupal_get_form('_ctrader_mls_rets_check_not_active_listings_form');
  return $output;
}

/**
 * Form for configure integration drupal and mls.
 */
function ctrader_mls_form($form, &$form_state) {
  $form['mls_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => variable_get('mls_username', ''),
  );
  $form['mls_password'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
  );
  return system_settings_form($form);
}

/**
 * Form for configure RETS server login data.
 */
function ctrader_mls_rets_data_form($form, &$form_state) {
  $form['rets_login_url'] = array(
    '#type' => 'textfield',
    '#title' => t('RETS login url'),
    '#default_value' => variable_get('rets_login_url', ''),
  );
  $form['rets_username'] = array(
    '#type' => 'textfield',
    '#title' => t('RETS username'),
    '#default_value' => variable_get('rets_username', ''),
  );
  $form['rets_password'] = array(
    '#type' => 'textfield',
    '#title' => t('RETS password'),
    '#default_value' => variable_get('rets_password', ''),

  );
  $form['rets_user_agent'] = array(
    '#type' => 'textfield',
    '#title' => t('RETS user agent'),
    '#default_value' => variable_get('rets_user_agent', ''),
  );
  $form['rets_user_agent_password'] = array(
    '#type' => 'textfield',
    '#title' => t('RETS user agent password'),
    '#default_value' => variable_get('rets_user_agent_password', ''),
  );

  return system_settings_form($form);
}


/**
 * Implements hook_libraries_info().
 */
function ctrader_mls_libraries_info() {
  $libraries['torontomlsapi'] = array(
    'name' => 'Torontomlsapi',
    'vendor url' => 'https://github.com/tamtranvn2012/torontomlsapi',
    'download url' => 'https://github.com/tamtranvn2012/torontomlsapi/archive/master.zip',
    'version arguments' => array(
      'file' => 'phrets.php',
      'pattern' => '@version\s+([0-9a-zA-Z\.-]+)@',
    ),
    'files' => array(
      'php' => array(
        'phrets.php',
      ),
    ),
  );
  return $libraries;
}

/**
 * Large XML import form.
 */
function xml_import_form() {
  $form = array();
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Start import'),
    '#disabled' => TRUE,
  );
  return $form;
}

/**
 * Large XML import start.
 */
function xml_import_form_submit($form, &$form_state) {
  $batch = array(
    'operations' => array(
      array('large_xml_import_operation', array()),
    ),
    'finished' => 'large_xml_import_finished',
    'title' => t('Processing large XML'),
    'init_message' => t('Large XML Batch is starting.'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Large XML Batch has encountered an error.'),
  );
  batch_set($batch);
}

/**
 * Large XML test operation.
 */
function large_xml_import_operation(&$context) {
  $folder_with_data_to_import = file_default_scheme() . '://import_data/06_04_16/cnd_data';
  $condos = array();
  $xml = simplexml_load_file($folder_with_data_to_import . '/cnd.xml');
  foreach ($xml->REData->REProperties->CondoProperty as $condo) {
    $condos[] = $condo;
  }
  $condo_count = count($condos);
  $items_per_pass = 30;
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current'] = 0;
    $context['sandbox']['max'] = $condo_count;
  }
  $records = array_slice($condos, $context['sandbox']['current'], $items_per_pass);
  if (!empty($records)) {
    $last_item = -1;
    $connection = entity_load('drealty_connection_entity', array('toronto_rets_connection'));
    $connection = end($connection);
    $field_mappings = $connection->FetchFieldMappings();
    $dc = new drealtyConnection();
    if ($dc->connect($connection->conid)) {
      $fields_metadata = $dc->rets->GetMetadataTable("Property", "CondoProperty");
      if ($fields_metadata) {
        $items = array();
        foreach ($records as $key => $condo) {
          $last_item = $key;
          $ml_num = $condo->Listing->MLS->__toString();

          $item = entity_create(DREALTY_ENTITY_TYPE, array(
            'id' => NULL,
            'type' => TORONTO_CONDO,
            'conid' => NULL,
            'hash' => NULL,
            'process_images' => NULL,
            'rets_imported' => FALSE,
            'status' => NULL,
            'rets_key' => $ml_num,
            'rets_id' => $ml_num,
            'class' => NULL,
            'active' => NULL,
            'label' => $condo->Listing->Address->__toString() != 'null' ? $condo->Listing->Address->__toString() : $ml_num,
            'created' => REQUEST_TIME,
            'changed' => REQUEST_TIME,
          ));

          // For photos import.
          // Add data to image field.
          if (!$_SESSION['media_files']) {
            $dir = $folder_with_data_to_import . '/cnd_media';
            $_SESSION['media_files'] = scandir($dir, 1);
            $_SESSION['media_files']['dir'] = $dir;
          }
          $sort_filenames = array();
          foreach ($_SESSION['media_files'] as $m_file) {
            if (strpos($m_file, $ml_num)) {
              $sort_filenames[] = $m_file;
            }
          }
          sort($sort_filenames, SORT_NATURAL | SORT_FLAG_CASE);
          $item_media_files_list = array();
          foreach ($sort_filenames as $file_name) {
            $file_data = array(
              'filename' => $file_name,
              'filepath' => $_SESSION['media_files']['dir'] . '/' . $file_name,
              'filemime' => file_get_mimetype($_SESSION['media_files']['dir'] . '/' . $file_name),
            );
            $item_media_files_list[] = $file_data;
          }
          if (!empty($item_media_files_list)) {
            foreach ($item_media_files_list as $item_file) {
              $image_info = image_get_info($item_file['filepath']);
              $file = file_save_data(file_get_contents($item_file['filepath']), file_default_scheme() . '://condo_media/' . basename($item_file['filepath']));
              $file->status = 1;
              $file->filesize = $image_info['file_size'];
              $file->height = $image_info['height'];
              $file->width = $image_info['width'];
              $file->timestamp = time();
              $file->alt = $ml_num . t(' image');
              $file->title = $item_file['filename'];
              $item->field_toronto_gallery[LANGUAGE_NONE][] = (array) $file;
            }
          }

          foreach ($field_mappings as $mapping) {
            $ftype = $mapping->field_api_type;
            switch ($ftype) {
              case 'text':
                foreach ($fields_metadata as $field_data) {
                  if ($mapping->systemname == $field_data['SystemName']) {
                    $field_standart_name = $field_data['StandardName'];
                    $field_value = $condo->Listing->{$field_standart_name}->__toString() == 'null' ? '' : $condo->Listing->{$field_standart_name}->__toString();
                    $item->{$mapping->field_name}[LANGUAGE_NONE][0]['value'] = isset($field_value) ? $field_value : NULL;
                  }
                }
                break;
              case 'number_integer':
              case 'number_decimal':
              case 'number_float':
                foreach ($fields_metadata as $field_data) {
                  if ($mapping->systemname == $field_data['SystemName']) {
                    $field_standart_name = $field_data['StandardName'];
                    $field_value = $condo->Listing->{$field_standart_name}->__toString();
                    $field_value = round(floatval($field_value), 2);
                    $item->{$mapping->field_name}[LANGUAGE_NONE][0]['value'] = (isset($field_value) && !empty($field_value)) ? $field_value : NULL;
                  }
                }
                break;
              case 'text_long':
                foreach ($fields_metadata as $field_data) {
                  if ($mapping->systemname == $field_data['SystemName']) {
                    $field_standart_name = $field_data['StandardName'];
                    $field_value = $condo->Listing->{$field_standart_name}->__toString();
                    $item->{$mapping->field_name}[LANGUAGE_NONE][0]['value'] = isset($field_value) ? $field_value : NULL;
                    $item->{$mapping->field_name}[LANGUAGE_NONE][0]['format'] = 'plain_text';
                  }
                }
                break;
              case 'datetime':
                foreach ($fields_metadata as $field_data) {
                  if ($mapping->systemname == $field_data['SystemName']) {
                    $field_standart_name = $field_data['StandardName'];
                    $field_value = $condo->Listing->{$field_standart_name}->__toString();
                    $item->{$mapping->field_name}[LANGUAGE_NONE][0]['value'] = (isset($field_value) && !empty($field_value)) && $field_value != 'null' ? $field_value : '1960-01-01T00:00:00.000';
                  }
                }
                break;
            }
          }
          $items[] = $item;
        }

        foreach ($items as $entity_presave) {
          $entity_presave->save();
        }
      }
    }

    $context['sandbox']['current'] = $context['sandbox']['progress'] + $last_item + 1;
    $context['sandbox']['progress'] += count($records);
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
    if ($context['finished'] >= 1) {
      unset($_SESSION['media_files']);
      $context['finished'] = 1;
    }
    if ($context['sandbox']['progress'] > 25) {
      unset($_SESSION['media_files']);
      $context['finished'] = 1;
    }
  }
}

/**
 * Batch finished callback.
 */
function large_xml_import_finished($success, $results, $operations) {
  if ($success) {
    $message = t('Import successful finished.');
  }
  else {
    $message = t('Finished with an error.');
  }
  drupal_set_message($message);
}

/**
 * Implements hook_field_attach_presave().
 */
function ctrader_mls_field_attach_presave($entity_type, $entity) {
  switch ($entity_type) {
    case DREALTY_ENTITY_TYPE:
      if ($entity->type == TORONTO_CONDO) {
        if (isset($entity->field_change_full_address_field[LANGUAGE_NONE][0]['value']) && $entity->field_change_full_address_field[LANGUAGE_NONE][0]['value'] == 0) {
          if (isset($entity->field_address_full__torcond[LANGUAGE_NONE][0]['value']) && empty($entity->field_test_geofilld)) {
//            $house_number = isset($entity->field_st_num__torcond[LANGUAGE_NONE][0]['value']) ? $entity->field_st_num__torcond[LANGUAGE_NONE][0]['value'] : '';
//            $street_name = isset($entity->field_st__torcond[LANGUAGE_NONE][0]['value']) ? " {$entity->field_st__torcond[LANGUAGE_NONE][0]['value']}" : '';
//            $street_suffix = isset($entity->field_st_sfx__torcond[LANGUAGE_NONE][0]['value']) ? " {$entity->field_st_sfx__torcond[LANGUAGE_NONE][0]['value']}" : '';
//            $street_direction = isset($entity->field_st_dir__torcond[LANGUAGE_NONE][0]['value']) ? " {$entity->field_st_dir__torcond[LANGUAGE_NONE][0]['value']}" : '';
//            $city = isset($entity->field_area__torcond[LANGUAGE_NONE][0]['value']) ? ", {$entity->field_area__torcond[LANGUAGE_NONE][0]['value']}" : '';
//            $state = ', ON';
//            $zip = isset($entity->field_zip__torcond[LANGUAGE_NONE][0]['value']) ? " {entity->field_zip__torcond[LANGUAGE_NONE][0]['value']}" : '';
//            $country = ', Canada';
//
//            if (isset($entity->field_municipality__torcond[LANGUAGE_NONE][0]['value']) && $entity->field_municipality__torcond[LANGUAGE_NONE][0]['value'] != 'Toronto') {
//              $community = " {$entity->field_municipality__torcond[LANGUAGE_NONE][0]['value']}";
//              $entity->field_address_full__torcond[LANGUAGE_NONE][0]['value'] = $house_number . $street_name . $street_suffix . $street_direction . $community . $city . $country;
//            }
//            elseif (isset($entity->field_community__torcond[LANGUAGE_NONE][0]['value'])) {
//              $community = " {$entity->field_community__torcond[LANGUAGE_NONE][0]['value']}";
//              $entity->field_address_full__torcond[LANGUAGE_NONE][0]['value'] = $house_number . $street_name . $street_suffix . $street_direction . $community . $city;
//            }
//            else {
//              $community = " {$entity->field_area__torcond[LANGUAGE_NONE][0]['value']}";
//              $entity->field_address_full__torcond[LANGUAGE_NONE][0]['value'] = $house_number . $street_name . $street_suffix . $street_direction . $community . $state . $zip . $country;
//            }

            // 2320 Gerrard St E, Toronto, Canada
            // House Number, Street Name, Street Suffix, Street Direction, City, State, Country
            $house_number = isset($entity->field_st_num__torcond[LANGUAGE_NONE][0]['value']) ? $entity->field_st_num__torcond[LANGUAGE_NONE][0]['value'] : '';
            $street_name = isset($entity->field_st__torcond[LANGUAGE_NONE][0]['value']) ? " {$entity->field_st__torcond[LANGUAGE_NONE][0]['value']}" : '';
            $street_suffix = isset($entity->field_st_sfx__torcond[LANGUAGE_NONE][0]['value']) ? " {$entity->field_st_sfx__torcond[LANGUAGE_NONE][0]['value']}" : '';
            $street_direction = isset($entity->field_st_dir__torcond[LANGUAGE_NONE][0]['value']) ? " {$entity->field_st_dir__torcond[LANGUAGE_NONE][0]['value']}" : '';
            $city = isset($entity->field_area__torcond[LANGUAGE_NONE][0]['value']) ? ", {$entity->field_area__torcond[LANGUAGE_NONE][0]['value']}" : '';
            $state = ', ON';
            $country = ', Canada';

            $entity->field_address_full__torcond[LANGUAGE_NONE][0]['value'] = $house_number . $street_name . $street_suffix . $street_direction . $city . $state . $country;

          }
          else {
            // 2320 Gerrard St E, Toronto, ON M4E 2E1, Canada
            // House Number, Street Name, Street Suffix, Street Direction, City, State, Zip, Country
            $house_number = isset($entity->field_st_num__torcond[LANGUAGE_NONE][0]['value']) ? $entity->field_st_num__torcond[LANGUAGE_NONE][0]['value'] : '';
            $street_name = isset($entity->field_st__torcond[LANGUAGE_NONE][0]['value']) ? " {$entity->field_st__torcond[LANGUAGE_NONE][0]['value']}" : '';
            $street_suffix = isset($entity->field_st_sfx__torcond[LANGUAGE_NONE][0]['value']) ? " {$entity->field_st_sfx__torcond[LANGUAGE_NONE][0]['value']}" : '';
            $street_direction = isset($entity->field_st_dir__torcond[LANGUAGE_NONE][0]['value']) ? " {$entity->field_st_dir__torcond[LANGUAGE_NONE][0]['value']}" : '';
            $city = isset($entity->field_area__torcond[LANGUAGE_NONE][0]['value']) ? ", {$entity->field_area__torcond[LANGUAGE_NONE][0]['value']}" : '';
            $state = ', ON';
            if (isset($entity->field_zip__torcond[LANGUAGE_NONE][0]['value'])) {
              $zip = str_replace(' ', '', $entity->field_zip__torcond[LANGUAGE_NONE][0]['value']);
              $zip = " {$zip}";
            }
            else {
              $zip = '';
            }
            $country = ', Canada';

            $entity->field_address_full__torcond[LANGUAGE_NONE][0]['value'] = $house_number . $street_name . $street_suffix . $street_direction . $city . $state . $zip . $country;
          }
        }
      }
      break;
  }
}


/**
 * Implements hook_entity_presave().
 */
function ctrader_mls_entity_presave($entity, $type) {
  switch ($type) {
    case DREALTY_ENTITY_TYPE:
      if ($entity->type == TORONTO_CONDO) {

        // Adds value with current price to multiple old-price field.
        // This needs for discount calculating.
        if (isset($entity->field_lp_dol__torcond[LANGUAGE_NONE][0]['value'])) {
          $key = count($entity->field_old_price_value__torcond[LANGUAGE_NONE]);
          if (empty($key)) {
            $entity->field_old_price_value__torcond[LANGUAGE_NONE][$key]['value'] = $entity->field_lp_dol__torcond[LANGUAGE_NONE][0]['value'];
          }
          elseif ($entity->field_old_price_value__torcond[LANGUAGE_NONE][$key - 1]['value'] != $entity->field_lp_dol__torcond[LANGUAGE_NONE][0]['value']) {
            $entity->field_old_price_value__torcond[LANGUAGE_NONE][$key]['value'] = $entity->field_lp_dol__torcond[LANGUAGE_NONE][0]['value'];
          }
        }

        // Creates fields value with min-max sqft for sqft range facet.
        $sqft_min = $sqft_max = 0;
        if (isset($entity->field_sqft__torcond[LANGUAGE_NONE][0]['value'])) {
          $sqft = $entity->field_sqft__torcond[LANGUAGE_NONE][0]['value'];
          if (strrpos($sqft, '-')) {
            $sqft = explode('-', $sqft);
            $sqft_min = intval($sqft[0]);
            $sqft_max = intval($sqft[1]);
          }
          else {
            $sqft_min = $sqft_max = intval($sqft);
          }
        }
        $entity->field_sqft_range_min__torcond[LANGUAGE_NONE][0]['value'] = $sqft_min;
        $entity->field_sqft_range_max__torcond[LANGUAGE_NONE][0]['value'] = $sqft_max;

        // Calculates price per sqft.
        $price = isset($entity->field_lp_dol__torcond[LANGUAGE_NONE][0]['value']) ? intval($entity->field_lp_dol__torcond[LANGUAGE_NONE][0]['value']) : 0;
        $entity->field_price_per_sqft__torcond[LANGUAGE_NONE][0]['value'] = $sqft_max != 0 ? round(($price / $sqft_max), 2) : 0;

        // Creates string value for search-point field (this field needs for solr polygon search).
        $lat = isset($entity->field_test_geofilld[LANGUAGE_NONE][0]['lat']) ? $entity->field_test_geofilld[LANGUAGE_NONE][0]['lat'] : NULL;
        $lon = isset($entity->field_test_geofilld[LANGUAGE_NONE][0]['lon']) ? $entity->field_test_geofilld[LANGUAGE_NONE][0]['lon'] : NULL;
        if ($lat && $lon) {
          $entity->field_search_point_string[LANGUAGE_NONE][0]['value'] = $lat . ',' . $lon;
        }
        else {
          //default Toronto coordinates.
          $entity->field_search_point_string[LANGUAGE_NONE][0]['value'] = '43.760,-79.390';
          // marks listing for update.
          $entity->hash = 0;
        }

        // Search listing point on neighbourhoods terms polygons and create reference.
        if (TRUE) {
          if (!isset($_SESSION['neighbourhoods_terms_polygons_data'])) {
            $vid = taxonomy_vocabulary_machine_name_load('neighbourhoods'); //Neighbourhoods vocabulary.
            $vid = $vid->vid;
            $vocabulary_term_entities = taxonomy_get_tree($vid, 0, 3, TRUE);
            $terms_polygon = array();
            foreach ($vocabulary_term_entities as $tax_term) {
              $tax_term_id = $tax_term->tid;
              $polygon = isset($tax_term->field_community_geolocation[LANGUAGE_NONE][0]['geom']) ? $tax_term->field_community_geolocation[LANGUAGE_NONE][0]['geom'] : NULL;
              if ($polygon !== NULL && $polygon != 'GEOMETRYCOLLECTION EMPTY') {
                if (strrpos($tax_term->field_community_geolocation[LANGUAGE_NONE][0]['geom'], 'MULTIPOLYGON') === FALSE) {
                  $polygon = $tax_term->field_community_geolocation[LANGUAGE_NONE][0]['geom'];
                  $polygon = str_replace(array(
                    'POLYGON ',
                    '(',
                    ')'
                  ), '', $polygon);
                  $polygon = explode(', ', $polygon);
                  $terms_polygon[$tax_term_id] = $polygon;
                }
                elseif (strrpos($tax_term->field_community_geolocation[LANGUAGE_NONE][0]['geom'], 'MULTIPOLYGON') !== FALSE) {
                  $polygon = $tax_term->field_community_geolocation[LANGUAGE_NONE][0]['geom'];
                  $polygon = str_replace(array(
                    'MULTIPOLYGON ',
                    '((',
                    '))'
                  ), '', $polygon);
                  $polygon = str_replace('), (', '*', $polygon);
                  $polygon = str_replace(array(')', '('), '', $polygon);
                  $multi_polygon_array = explode('*', $polygon);
                  $multi_polygon = array();
                  foreach ($multi_polygon_array as $polygon) {
                    $polygon = explode(', ', $polygon);
                    $multi_polygon[] = $polygon;
                  }
                  $terms_polygon[$tax_term_id] = $multi_polygon;
                }
              }
            }
            $_SESSION['neighbourhoods_terms_polygons_data'] = $terms_polygon;
          }
          $communities_vocabulary_data = variable_get('ctrader_map_neighbourhood_json');
          $terms_polygon = $_SESSION['neighbourhoods_terms_polygons_data'];
          require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'ctrader_map') . '/classes/pointLocation.php';
          $pointLocation = new pointLocation();
          $point = $entity->field_search_point_string[LANGUAGE_NONE][0]['value'];
          $point = explode(',', $point);
          $point = array_reverse($point);
          $point = implode(' ', $point);
          $found_correct_region = FALSE;

          if (!$found_correct_region) {
            $entity_comm_code = $entity->field_community_code__torcond[LANGUAGE_NONE][0]['value'];
            foreach ($communities_vocabulary_data as $community_vocabulary_data) {
              if ($community_vocabulary_data['properties']['community_code'] == $entity_comm_code) {
                $entity->field_city_region__torcond[LANGUAGE_NONE][0]['tid'] = $community_vocabulary_data['id'];
                $found_correct_region = TRUE;
              }
            }
          }
          // Search in polygons.
          if (!$found_correct_region) {
            foreach ($terms_polygon as $term_id => $term_polygon) {
              if (is_array($term_polygon)) {
                $check = $pointLocation->pointInPolygon($point, $term_polygon);
                if ($check == 'inside') {
                  $entity->field_city_region__torcond[LANGUAGE_NONE][0]['tid'] = $term_id;
                  $found_correct_region = TRUE;
                }
              }
            }
          }
          // Search in multipoligons if didn't found in polygons.
          if (!$found_correct_region) {
            foreach ($terms_polygon as $term_id => $term_polygon) {
              if (is_array($term_polygon[0])) {
                foreach ($term_polygon as $sub_polygon) {
                  $check = $pointLocation->pointInPolygon($point, $sub_polygon);
                  if ($check == 'inside') {
                    $entity->field_city_region__torcond[LANGUAGE_NONE][0]['tid'] = $term_id;
                    $found_correct_region = TRUE;
                  }
                }
              }
            }
          }
        }

        // Sets images alt and removes title.
        if (!empty($entity->field_toronto_gallery[LANGUAGE_NONE])) {
          foreach ($entity->field_toronto_gallery[LANGUAGE_NONE] as $key => $value) {
            $alt_mls_num = isset($entity->field_ml_num__torcond[LANGUAGE_NONE][0]['value']) ? 'MLS #' . $entity->field_ml_num__torcond[LANGUAGE_NONE][0]['value'] . ',' : '';
            $alt_street_num = isset($entity->field_st_num__torcond[LANGUAGE_NONE][0]['value']) ? $entity->field_st_num__torcond['und'][0]['value'] : '';
            $alt_street = isset($entity->field_st__torcond[LANGUAGE_NONE][0]['value']) ? ' ' . $entity->field_st__torcond[LANGUAGE_NONE][0]['value'] : ' ';
            $alt_street_sfx = isset($entity->field_st_sfx__torcond[LANGUAGE_NONE][0]['value']) ? ' ' . $entity->field_st_sfx__torcond[LANGUAGE_NONE][0]['value'] : ' ';
            $alt_unit_num = isset($entity->field_unit_num__torcond[LANGUAGE_NONE][0]['value']) ? ', #' . $entity->field_unit_num__torcond[LANGUAGE_NONE][0]['value'] : ' ';
            $alt_area = isset($entity->field_area__torcond[LANGUAGE_NONE][0]['value']) ? ', ' . $entity->field_area__torcond[LANGUAGE_NONE][0]['value'] : '';

            $entity->field_toronto_gallery[LANGUAGE_NONE][$key]['alt'] = $alt_mls_num . $alt_street_num . $alt_street . $alt_street_sfx . $alt_unit_num . $alt_area;
            $entity->field_toronto_gallery[LANGUAGE_NONE][$key]['title'] = '';
          }
        }

        // Creates or updates building for listing.
        if (!$entity->is_new) {
          _ctrader_mls_create_building_and_reference($entity, $type);
        }
      }

      break;
  }
}


/**
 * Implements hook_entity_insert().
 */
function ctrader_mls_entity_insert($entity, $type) {
  _ctrader_mls_create_building_and_reference($entity, $type);
}


/**
 *  Creates new building entity or if already created makes reference to condo.
 */
function _ctrader_mls_create_building_and_reference($entity, $type) {
  if ($type == DREALTY_ENTITY_TYPE && $entity->type == TORONTO_CONDO) {
    // Creates reference to condo marked as building.
    if (!empty($entity->field_search_point_string[LANGUAGE_NONE][0]['value'])) {

      // todo Have to change field name!!!!!
      $reference_field_name = 'field_reference_to_condo';

      $building_with_same_coord = db_select('field_data_field_search_point_string', 'sps')
        ->fields('sps', array('entity_id',))
        ->condition('bundle', TORONTO_BUILDING)
        ->condition('field_search_point_string_value', $entity->field_search_point_string[LANGUAGE_NONE][0]['value'], '=')
        ->orderBy('entity_id')
        ->execute()
        ->fetchCol();
      if (empty($building_with_same_coord)) {
        $entity_building = clone $entity;
        $entity_building->id = NULL;
        $entity_building->type = TORONTO_BUILDING;
        $entity_building->{$reference_field_name}[LANGUAGE_NONE][] = array('target_id' => $entity->id);
        $entity_building->created = time();
        unset($entity_building->is_new);
        unset($entity_building->original);
        $entity_building->label = $entity->field_addr__torcond[LANGUAGE_NONE][0]['value'] . ' ' . $entity->field_area__torcond[LANGUAGE_NONE][0]['value'];
//        $entity_building->label = $entity_building->label . '--building';
        _ctrader_mls_count_average_pricepersqft($entity_building, $entity);
        entity_save(DREALTY_ENTITY_TYPE, $entity_building);
      }
      else {
        $building = entity_load_single(DREALTY_ENTITY_TYPE, reset($building_with_same_coord));

        // Checks if this building has reference with this condo.
        $not_have_reference = TRUE;
        if (!empty($building->{$reference_field_name}[LANGUAGE_NONE])) {
          foreach ($building->{$reference_field_name}[LANGUAGE_NONE] as $key => $value) {
            if ($value['target_id'] == $entity->id) {
              $not_have_reference = FALSE;
            }
          }
        }
        if ($not_have_reference) {
          $building->{$reference_field_name}[LANGUAGE_NONE][] = array('target_id' => $entity->id);
        }
        if (empty($building->field_toronto_gallery)) {
          $building->field_toronto_gallery = $entity->field_toronto_gallery;
        }
        _ctrader_mls_count_average_pricepersqft($building, $entity);

        entity_save(DREALTY_ENTITY_TYPE, $building);
      }
    }
  }
}


/**
 * Calculates average price per sqft in building.
 *
 * @param $building - building entity.
 * @param $condo - listing entity.
 */
function _ctrader_mls_count_average_pricepersqft(&$building, &$condo) {
  $building_condos = array();
  if (isset($building->field_reference_to_condo[LANGUAGE_NONE]) && !empty($building->field_reference_to_condo[LANGUAGE_NONE])) {
    $condo_ids = array();
    foreach ($building->field_reference_to_condo[LANGUAGE_NONE] as $key => $value) {
      $condo_ids[] = $value['target_id'];
    }
    $building_condos = entity_load(DREALTY_ENTITY_TYPE, $condo_ids, array('active' => 1));
  }

  // There we have all active condos in this building.
  // And now try to calculate avarage price per sqft for lease and sale.
  if (!empty($building_condos)) {
    $lease_prices = array();
    $sale_prices = array();
    foreach ($building_condos as $value) {
      if (stripos($value->field_s_r__torcond[LANGUAGE_NONE][0]['value'], 'sale') !== FALSE) {
        if (isset($value->field_price_per_sqft__torcond[LANGUAGE_NONE][0]['value']) && $value->field_price_per_sqft__torcond[LANGUAGE_NONE][0]['value'] != 0) {
          $sale_prices[] = $value->field_price_per_sqft__torcond[LANGUAGE_NONE][0]['value'];
        }
      }
      elseif (stripos($value->field_s_r__torcond[LANGUAGE_NONE][0]['value'], 'lease') !== FALSE) {
        if (isset($value->field_price_per_sqft__torcond[LANGUAGE_NONE][0]['value']) && $value->field_price_per_sqft__torcond[LANGUAGE_NONE][0]['value'] != 0) {
          $lease_prices[] = $value->field_price_per_sqft__torcond[LANGUAGE_NONE][0]['value'];
        }
      }
    }

    if (!empty($lease_prices)) {
      $summ = array_sum($lease_prices);
      $count = count($lease_prices);
      if ($summ != 0 && $count != 0) {
        $building->field_price_per_sqft_lease[LANGUAGE_NONE][0]['value'] = $summ / $count;
      }
      else {
        $building->field_price_per_sqft_lease[LANGUAGE_NONE][0]['value'] = 0;
      }
    }
    if (!empty($sale_prices)) {
      $summ = array_sum($sale_prices);
      $count = count($sale_prices);
      if ($summ != 0 && $count != 0) {
        $building->field_price_per_sqft_sale[LANGUAGE_NONE][0]['value'] = $summ / $count;
      }
      else {
        $building->field_price_per_sqft_sale[LANGUAGE_NONE][0]['value'] = 0;
      }
    }
  }
}


/**
 * Implements hook_form_alter().
 */
function ctrader_mls_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'drealty_resource_configure_form':
      $add_image_chunk_size_options = array(
        '75' => '75',
        '100' => '100',
      );
      foreach ($add_image_chunk_size_options as $key => $value) {
        $form['feed']['images']['image_chunk_size']['#options'][$key] = $value;
      }
      $add_query_chunk_size_options = array(
        15 => 15,
        30 => 30,
        60 => 60,
        120 => 120
      );
      $form['feed']['query_options']['chunk']['#options'] = $add_query_chunk_size_options + $form['feed']['query_options']['chunk']['#options'];
      break;
    case 'mortgage_calculator_js_form':
      $form['mortgage_rate_2']['#weight'] = 0.002;
      break;
    case 'book_a_viewing_entityform_edit_form':
      $form['field_buy_now_button']['#weight'] = '401';
      $form['field_buy_now_button'][LANGUAGE_NONE][0]['markup']['#markup'] = l(t('buy now'), drupal_get_path_alias() . "/buy");
      break;
    case 'drealty_listing_edit_form':
      $form['actions']['delete']['#submit'][0] = '_ctrader_mls_drealty_listing_delete';
      break;
    case 'taxonomy_manager_form':
      if (!isset($_GET[42])) {
        drupal_set_message(t('Delete button disabled in ctrader_mls.module'), 'warning');
        $form['delete']['#disabled'] = TRUE;
      }
      break;
    case 'geocoder_admin_settings':
      $form['geocoder_apikey_google']['#description'] .= "<ul>
                                                            <p></p>
                                                            <span>ScienteCraft delevoper's Google Geocoding API Keys</span>
                                                            <li>#1: AIzaSyCQAdcHNROXSLuMTFeai3gzT8Aa2ePvdvA (n.s....@gmail.com)</li>
                                                            <li>#2: AIzaSyAqGiN_hwQRMlNN9JxpTiiT7KgyCwIDgms (s..mo@gmail.com)</li>
                                                            <p></p>
                                                          </ul>";
      break;
  }
}

/**
 * Function for deleting drealty listing entity.
 */
function _ctrader_mls_drealty_listing_delete($form, &$form_state) {
  //grab the listing
  $listing = $form_state['listing'];
  $listing_info = $listing->entityInfo();

  // redirect back to the content list
  $form_state['redirect'] = $listing_info['admin ui']['path'];

  //delete the listing
  $listing->delete();
}


/**
 * Implements hook_views_api().
 */
function ctrader_mls_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ctrader_mls') . '/views',
  );
}


/**
 * Implements hook_ctools_plugin_directory().
 */
function ctrader_mls_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && !empty($plugin_type)) {
    return "plugins/{$plugin_type}";
  }
}


/**
 * Implements hook_flag_alter().
 */
function ctrader_mls_flag_alter(&$flag) {

}


/**
 * Detects user geoloc from user ip and stores data to SESSION.
 */
function _ctrader_mls_detect_user_geolocation() {
  $default_ip = '192.206.151.131';
  if (!empty($_SERVER['HTTP_CLIENT_IP'])) {
    $ip = $_SERVER['HTTP_CLIENT_IP'];
  }
  elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
    $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
  }
  else {
    $ip = $_SERVER['REMOTE_ADDR'];
  }
  if (!isset($_SESSION['user_geoloc_detect']) || empty($_SESSION['user_geoloc_detect']['location']['ip']) || $_SESSION['user_geoloc_detect']['location']['ip'] != $ip) {
    $current_time = time();

    // Does not detect if last detection was less than 10 minutes ago.
    if (isset($_SESSION['user_geoloc_detect']['creation_timestamp']) && ($current_time - $_SESSION['user_geoloc_detect']['creation_timestamp']) < 600) {
      return NULL;
    }

    if (!is_string($ip) || strlen($ip) < 1 || $ip == '127.0.0.1' || $ip == 'localhost') {
//      $_SESSION['user_geoloc_detect']['location']  = array(
//        'ip' => '192.206.151.131',
//        'country_code' => 'CA',
//        'country_name' => 'Canada',
//        'region_code' => 'ON',
//        'region_name' => 'Ontario',
//        'city' => 'Toronto',
//        'zip_code' => 'M6G',
//        'time_zone' => 'America/Toronto',
//        'latitude' => 43.66667,
//        'longitude' => -79.4168,
//        'metro_code' => 0,
//      );
//      $_SESSION['user_geoloc_detect']['creation_timestamp'] = time();

      $ip = $default_ip;
    }

//    $url = 'http://freegeoip.net/json/' . urlencode($ip);
    $url2 = 'http://www.geoplugin.net/php.gp?ip=' . urlencode($ip);
    $location = file_get_contents($url2);
    $location = unserialize($location);
    $_SESSION['user_geoloc_detect']['location'] = array(
      'ip' => $location['geoplugin_request'],
      'country_code' => $location['geoplugin_countryCode'],
      'country' => 'Canada',
      'region_code' => $location['geoplugin_regionCode'],
      'region' => $location['geoplugin_regionName'],
      'city' => $location['geoplugin_city'],
      'zip_code' => '',
      'time_zone' => 'America/Toronto',
      'latitude' => $location['geoplugin_latitude'],
      'longitude' => $location['geoplugin_longitude'],
      'metro_code' => $location['geoplugin_areaCode'],
    );
    $_SESSION['user_geoloc_detect']['creation_timestamp'] = time();
  }
}

/**
 * Implements hook_taxonomy_menu_path().
 */
function ctrader_mls_taxonomy_menu_path() {
  $output = array(
    '_ctrader_mls_taxonomy_menu_path_custom_explore_neighbourhoods' => t('CTrader regions menu path (explore neighbourhoods)'),
    '_ctrader_mls_taxonomy_menu_path_custom_for_sale' => t('CTrader regions menu path (for sale)'),
    '_ctrader_mls_taxonomy_menu_path_custom_for_rent' => t('CTrader regions menu path (for rent)'),

  );
  return $output;
}

/**
 * Callback for hook_taxonomy_menu_path.
 */
function _ctrader_mls_taxonomy_menu_path_custom_explore_neighbourhoods($vid, $tid) {
  $path = array(
    CTRADER_SEARCH_RESULT_PAGE,
  );

  $all_parent_terms = taxonomy_get_parents_all($tid);
  $all_parent_terms = array_reverse($all_parent_terms);
  foreach ($all_parent_terms as $term) {
    $path[] = $term->name;
  }
  $path = implode('/', $path);
  return $path;
}

/**
 * Callback for hook_taxonomy_menu_path.
 */
function _ctrader_mls_taxonomy_menu_path_custom_for_sale($vid, $tid) {
  $path = array(
    CTRADER_SEARCH_RESULT_PAGE,
  );

  $all_parent_terms = taxonomy_get_parents_all($tid);
  $all_parent_terms = array_reverse($all_parent_terms);
  foreach ($all_parent_terms as $term) {
    $path[] = $term->name;
  }
  $path = implode('/', $path);
  $path .= '?f[0]=field_s_r__torcond:Sale';
  return $path;
}

/**
 * Callback for hook_taxonomy_menu_path.
 */
function _ctrader_mls_taxonomy_menu_path_custom_for_rent($vid, $tid) {
  $path = array(
    CTRADER_SEARCH_RESULT_PAGE,
  );

  $all_parent_terms = taxonomy_get_parents_all($tid);
  $all_parent_terms = array_reverse($all_parent_terms);
  foreach ($all_parent_terms as $term) {
    $path[] = $term->name;
  }
  $path = implode('/', $path);
  $path .= '?f[0]=field_s_r__torcond:Lease';
  return $path;
}


/**
 * Form for makes not active listings active if they are in result query.
 */
function _ctrader_mls_rets_check_not_active_listings_form() {
  $form = array();
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Check not active listings'),
    '#suffix' => t('Makes not active listings active if they are in result query.'),
  );
  return $form;
}

function _ctrader_mls_rets_check_not_active_listings_form_submit($form, &$form_state) {
  $connections = entity_load('drealty_connection_entity');
  $connection = NULL;
  foreach ($connections as $value) {
    if($value->active == 1) {
      $connection = $value;
    }
  }
  $test = new CtraderDrealtyDaemon;
  $test_classes = $test->CheckListingStatuses($connection);
  $output = '';
  foreach($test_classes as $test_class) {
    $output .= theme('item_list',  array('items' => $test_class, 'title' => 'Results:'));
  }
  drupal_set_message($output);
}

/**
 * Implements hook_entity_info_alter().
 */
function ctrader_mls_entity_info_alter(&$entity_info) {
  if (isset($entity_info['drealty_listing'])) {
    $entity_info['drealty_listing'] += array(
      'entity cache' => module_exists('entitycache'),
      'field cache' => !module_exists('entitycache'),
    );
  }
}
