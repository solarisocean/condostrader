<?php

/**
 * @file
 * Install, update, and uninstall functions for the ctrader_mls module.
 */

/**
 * Implements hook_requirements().
 */
function ctrader_mls_requirements($phase) {
  $requirements = array();
  $t = get_t();

  // Verify the Leaflet library is installed correctly.
  if (in_array($phase, array('runtime', 'update'))) {
    $library = libraries_detect('torontomlsapi');
    $requirements['torontomlsapi'] = array(
      'title' => $t('Torontomlsapi'),
    );

    if ($library['installed']) {
      $requirements['torontomlsapi'] += array(
        'value' => $library['version'],
        'description' => t('The Torontomlsapi library is installed correctly. RETS functionality available.'),
        'severity' => REQUIREMENT_OK,
      );
    }
    else {
      $requirements['torontomlsapi'] += array(
        'value' => $library['error'],
        'description' => $library['error message'],
        'severity' => REQUIREMENT_ERROR,
      );
    }
  }

  return $requirements;
}


/**
 * Delete all buildings.
 */
function ctrader_mls_update_7000(&$sandbox) {
  $listings_per_pass = 10;
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['current_id'] = 0;
    $sandbox['max'] = db_select('drealty_listing', 'dl')
      ->fields('dl', array('id'))
      ->condition('type', 'toronto_building')
      ->execute()
      ->rowCount();
  }

  $records = db_select('drealty_listing', 'dl')
    ->fields('dl', array('id'))
    ->condition('id', $sandbox['current_id'], '>')
    ->condition('type', 'toronto_building')
    ->range(0, $listings_per_pass)
    ->orderBy('id')
    ->execute()
    ->fetchCol();

  if (!empty($records)) {
    $entities = entity_load(DREALTY_ENTITY_TYPE, array($records));
    foreach ($entities as $entity) {
      $entity->delete();
    }
    $sandbox['current_id'] = end($records);
    $sandbox['progress'] += count($records);
    $sandbox['#finished'] = $sandbox['progress'] / $sandbox['max'];
    if ($sandbox['#finished'] >= 1) {
      $sandbox['#finished'] = 1;
    }
  }

  // To display a message to the user when the update is completed, return it.
  return t('Changed taxonomy field value for every drealty_listing entity type.');

  // In case of an error, simply throw an exception with an error message.
  throw new DrupalUpdateException('Something went wrong.');
}
