<?php


/**
 * Implements hook_menu().
 */
function ctrader_map_menu() {
  $items = array();
  $items['admin/config/ctrader'] = array(
    'title' => t('CondosTrader settings'),
    'description' => 'This is the parent item',
    'position' => 'left',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/ctrader/create-terms'] = array(
    'title' => 'Create Toronto region terms',
    'page callback' => '_ctrader_map_create_terms_page_callback',
    'access arguments' => array('administer site configuration'),
  );
  $items['build-point-popup'] = array(
    'title' => 'Builds popup for point on map',
    'page callback' => '_build_point_popup_page_callback',
    'access callback' => TRUE,
    'delivery callback' => 'drupal_json_output',
  );
  return $items;
}


/**
 * Implements hook_init().
 */
function ctrader_map_init() {
  $args = arg();

  if ($args[0] == 'taxonomy' && $args[1] == 'term') {
    $path = libraries_get_path('leaflet');
    drupal_add_js($path . '/leaflet.js');
    drupal_add_css($path . '/leaflet.css');
    $path = libraries_get_path('Leaflet.draw');
    drupal_add_js($path . '/dist/leaflet.draw.js');
    drupal_add_css($path . '/dist/leaflet.draw.css');
    drupal_add_js(drupal_get_path('module', 'ctrader_map') . '/js/taxonomy_map_edit.js');
  }

  drupal_add_css(drupal_get_path('module', 'ctrader_map') . '/css/ctrader-map.css');
  variable_del('neighbourhood_json');
}


/**
 * Implements hook_search_api_solr_query_alter().
 */
function ctrader_map_search_api_solr_query_alter(array &$call_args, SearchApiQueryInterface $query) {
  switch ($query->getOption('search id')) {
    case 'search_api_views:condo_search_page:page':
    case 'search_api_views:condo_search_page:block_1':
    case 'search_api_views:search_results_ctrader:block_1':
    case 'search_api_views:search_results_ctrader:page_1':
      $query_string = serialize($query);
      $_SESSION['query_from_view'] = $query_string;
      break;
    case 'search_api_views:map:page':
      break;
  }
  $options = $query->getOptions();
  if (isset($options['query_label'])) {
    switch ($options['query_label']) {
      case 'search_on_map':
        $need_this_fields = array(
          'item_id',
          'score',
          'tm_label',
          'locs_field_test_geofilld$latlon',
        );
        $call_args['params']['fl'] = implode(',', $need_this_fields);
        break;
    }
  }
}


/**
 * Implements hook_block_info().
 */
function ctrader_map_block_info() {
  $blocks = array();
  $blocks['main_map'] = array(
    'info' => t('Custom block: Main Map'),
//    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function ctrader_map_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'main_map':
      $server = search_api_server_load('solr_server');

      if (isset($_SESSION['query_from_view'])) {
        $query = unserialize($_SESSION['query_from_view']);
        $query->setOption('limit', NULL);
        $query->setOption('query_label', 'search_on_map');
        $query->fields(array());
//    unset($_SESSION['query_from_view']);
      }
      else {
        $index = search_api_index_load('toronto_condo_index');
        $query = new SearchApiQuery($index);
        $query->keys();
        $query->fields(array());
//    $query->range(0, 150);
      }

      $solr = new SearchApiSolrService($server);
      $result = $solr->search($query);

      $condos_neighbourhood_names = array();
      $array_json = array();
      foreach ($result['results'] as $key => $item) {
        if (!empty($item['fields']['field_test_geofilld:latlon'])) {
          $coord = explode(',', $item['fields']['field_test_geofilld:latlon']);
        }
        else {
          // Toronto City default coordinates.
          $coord = array(
            '43.760' . rand(0, 9),
            '-79.390' . rand(0, 9),
          );
        }
        $popup_content = 'id: ' . $item['fields']['search_api_id'];

        $prepared = array(
          'id' => $item['id'],
          'type' => 'Feature',
          'properties' => array(
            'name' => !empty($item['fields']['field_addr__torcond'][0]) ? $item['fields']['field_addr__torcond'][0] : 'Condo',
            'popupContent' => $popup_content,
          ),
          'geometry' => array(
            'type' => 'Point',
            'coordinates' => is_array($coord) ? array(
              (float) $coord[1],
              (float) $coord[0]
            ) : '',
          ),
        );
        $array_json[] = $prepared;

        if (!empty($item['fields']['field_community__torcond'][0]) && !in_array($item['fields']['field_community__torcond'][0], $condos_neighbourhood_names)) {
          $condos_neighbourhood_names[] = $item['fields']['field_community__torcond'][0];
        }
        sort($condos_neighbourhood_names);
      }

      drupal_add_js(array('condosMapData' => $array_json), 'setting');
      $all_neighbourhoods_json = _ctrader_map_prepare_neighbourhoods_json($condos_neighbourhood_names, $array_json);

      $path = libraries_get_path('leaflet');
      drupal_add_js($path . '/leaflet-src.js');
      drupal_add_css($path . '/leaflet.css');

      $path = libraries_get_path('leaflet_label');
      drupal_add_js($path . '/dist/leaflet.label.js');
      drupal_add_css($path . '/dist/leaflet.label.css');

      $path = libraries_get_path('Leaflet.draw');
      drupal_add_js($path . '/dist/leaflet.draw.js');
      drupal_add_css($path . '/dist/leaflet.draw.css');

      //Leaflet Free Draw tool.
      $path = libraries_get_path('leafletFreeDraw');
      drupal_add_js($path . '/d3.min.js');
      drupal_add_js($path . '/clipper.js');
      drupal_add_js($path . '/concavehull.min.js');
      drupal_add_js($path . '/FreeDraw.js');
      drupal_add_js($path . '/Options.js');
      drupal_add_js($path . '/Utilities.js');
      drupal_add_js($path . '/Memory.js');
      drupal_add_js($path . '/Hull.js');

      $path = libraries_get_path('leaflet_markercluster');
      drupal_add_css($path . '/dist//dist/MarkerCluster.css');
      drupal_add_css($path . '/dist/MarkerCluster.Default.css');
      drupal_add_js($path . '/dist/leaflet.markercluster.js');

      drupal_add_js(drupal_get_path('module', 'ctrader_map') . '/js/custom_map.js');

      // Sends data to js if it is polygon search.
      if (isset($_GET['polygon'])) {
        $pre_coordinates = explode(',', $_GET['polygon']);
        $coordinates = array();
        foreach ($pre_coordinates as $value) {
          $coordinates[] = explode(' ', $value);
        }
        $user_polygon_search = array(
          'geometry' => array(
            'coordinates' => array(
              $coordinates,
            ),
            'type' => 'Polygon'
          ),
          'properties' => array(
            'name' => 'User search polygon',
          ),
          'type' => 'Feature',
        );
        drupal_add_js(array('userPolygonSearch' => $user_polygon_search), 'setting');
      }

      // Sends data to js if it is location select.
      if (isset($_GET['region'])) {
        $regions = explode('>', $_GET['region']);
        $results_map_polygons = array();
        $location_select_polygon = array();
        $vocabulary_machine_name = 'neighbourhoods';
        $vid = taxonomy_vocabulary_machine_name_load($vocabulary_machine_name); //Neighbourhoods vocabulary.
        $vid = $vid->vid;
        $children_terms = taxonomy_get_tree($vid, end($regions));
        $children_terms_ids = array();
        foreach ($children_terms as $children_term) {
          $children_terms_ids[] = $children_term->tid;
        }
//        foreach ($all_neighbourhoods_json as $value) {
//          if ($value['properties']['parent_id'] == end($regions)) {
//            $results_map_polygons[] = $value;
//          }
//          if ($value['id'] == end($regions)) {
//            $location_select_polygon = $value;
//          }
//        }
//        if (!$results_map_polygons) {
//          $results_map_polygons[] = $location_select_polygon;
//        }
        foreach ($all_neighbourhoods_json as $value) {
          if (in_array($value['id'], $children_terms_ids)) {
            $results_map_polygons[] = $value;
          }
          if ($value['id'] == end($regions)) {
            $location_select_polygon = $value;
          }
        }
        if (!$results_map_polygons) {
          $results_map_polygons[] = $location_select_polygon;
        }

        foreach ($results_map_polygons as $key => $value) {
          if ($value['properties']['has_children'] == 1) {
            unset($results_map_polygons[$key]);
          }
        }
        sort($results_map_polygons);

        drupal_add_js(array('locationSelect' => $results_map_polygons), 'setting');
      }

      $block['subject'] = 'Block with main map';
      $block['content'] = '<div id="mapid"></div>';
      break;
  }
  return $block;
}


/**
 * Implements hook_entity_presave().
 */
function ctrader_map_entity_presave($entity, $type) {
  switch ($type) {
    case DREALTY_ENTITY_TYPE:

      break;
  }
}


/**
 * Implements hook_ctools_plugin_directory().
 */
function ctrader_map_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && !empty($plugin_type)) {
    return "plugins/{$plugin_type}";
  }
}


/**
 * Implements hook_theme().
 */
function ctrader_map_theme($existing, $type, $theme, $path) {
  $themes = array();
  $themes['ctrader_single_condo_map_legend'] = array(
    'variables' => array(
      'neighbourhood_name' => 'Ontario',
      'neighbourhood_link' => NULL,
      'municipality_name' => NULL,
      'municipality_link' => NULL,
      'city_name' => NULL,
      'city_link' => NULL,
      'address' => NULL,
      'country_region' => NULL,
      'zip_code' => NULL,
      'unit' => NULL,
      'community_name' => NULL,
      'community_link' => NULL,
      'area_name' => NULL,
      'area_link' => NULL,
    ),
    'template' => 'theme/single-condo-map-legend',
  );
  return $themes;
}


/**
 * Creates json with Toronto neighbourhoods coordinates.
 */
function _ctrader_map_prepare_neighbourhoods_json($condos_neighbourhood_names = array(), $points_array = array()) {
  if (!variable_get('ctrader_map_neighbourhood_json')) {
    $vocabulary_machine_name = 'neighbourhoods';
    $vid = taxonomy_vocabulary_machine_name_load($vocabulary_machine_name); //Neighbourhoods vocabulary.
    $vid = $vid->vid;
    $allowed_cities = array('York Region', 'York', 'Toronto', 'Peel', 'Halton', 'Durham');
    $city_terms = taxonomy_get_tree($vid, 0, 1, TRUE);
    $vocabulary_term_entities = array();
    foreach ($city_terms as $value) {
      if (in_array($value->name, $allowed_cities)) {
        $vocabulary_term_entities[$value->tid] = $value;
        $vocabulary_term_entities += _ctrader_map_taxonomy_get_tree($vid, $value->tid, NULL, TRUE);
      }
    }
    $geofield_name = 'field_community_geolocation';
    $terms_polygon_prejson = array();
    foreach ($vocabulary_term_entities as $tax_term) {
      $polygon = isset($tax_term->{$geofield_name}[LANGUAGE_NONE][0]['geom']) ? $tax_term->{$geofield_name}[LANGUAGE_NONE][0]['geom'] : NULL;
      if ($polygon !== NULL && $polygon != 'GEOMETRYCOLLECTION EMPTY') {
        $tax_term_id = $tax_term->tid;
        $tax_term_name = $tax_term->name;
        $polygon_popup_content = $tax_term_name;
        $coordinates = array();
        if (strrpos($tax_term->{$geofield_name}[LANGUAGE_NONE][0]['geom'], 'MULTIPOLYGON') === FALSE) {
          $type = 'Polygon';
          $polygon = str_replace(array('POLYGON ', '(', ')'), '', $polygon);
          $polygon = explode(', ', $polygon);
          $pre_coordinates = array();
          foreach ($polygon as $value) {
            $pre_coordinates[] = explode(' ', $value);
          }
          $coordinates[] = $pre_coordinates;
        }
        else {
          $type = 'MultiPolygon';
          $pre_coordinates = array();
          $polygon = str_replace(array(
            'MULTIPOLYGON ',
            '(((',
            ')))'
          ), '', $polygon);
          $pre_multi = explode('), (', $polygon);
          $pre_multi_coordinates = array();
          foreach ($pre_multi as $value) {
            $pre_points = explode(',', $value);
            $points = array();
            foreach ($pre_points as $pre_point) {
              $pre_point = trim($pre_point);
              $points[] = explode(' ', $pre_point);
            }
            $pre_multi_coordinates[] = $points;
          }
          $coordinates[] = $pre_multi_coordinates;
        }
        $term_parent_id = end($tax_term->parents);

        $has_children = 0;
        foreach ($vocabulary_term_entities as $value) {
          if (end($value->parents) == $tax_term->tid) {
            $has_children = 1;
          }
        }

        if (isset($tax_term->field_community_code[LANGUAGE_NONE][0]['value'])) {
          $community_code = $tax_term->field_community_code[LANGUAGE_NONE][0]['value'];
        }
        else {
          $community_code = '';
        }

        $tax_depth = in_array($tax_term->name, $allowed_cities) ? $tax_term->depth : $tax_term->depth + 1;
        $terms_polygon_prejson[] = array(
          'geometry' => array(
            'coordinates' => $coordinates,
            'type' => $type,
          ),
          'properties' => array(
            'name' => $tax_term_name,
            'popupContent' => $polygon_popup_content,
            'parent_id' => $term_parent_id,
            'depth' => $tax_depth,
            'has_children' => $has_children,
            'community_code' => $community_code,
            'well_known_text' => $tax_term->field_community_geolocation[LANGUAGE_NONE][0]['geom'],
          ),
          'id' => $tax_term_id,
          'type' => 'Feature',
        );
      }
    }
    variable_set('ctrader_map_neighbourhood_json', $terms_polygon_prejson);
  }
  $prepared_neighbourhoods_json = isset($terms_polygon_prejson) ? $terms_polygon_prejson : variable_get('ctrader_map_neighbourhood_json');
  $prepared_neighbourhoods_json_deepest = array();
  foreach ($prepared_neighbourhoods_json as $value) {
    if (!$value['properties']['has_children']) {
      $prepared_neighbourhoods_json_deepest[] = $value;
    }
  }
//  drupal_add_js(array('neighbourhoodsMapData' => $prepared_neighbourhoods_json), 'setting');
  drupal_add_js(array('neighbourhoodsMapData' => $prepared_neighbourhoods_json_deepest), 'setting');

  return $prepared_neighbourhoods_json;
}

function _ctrader_map_kml_to_xml() {
  $xml = simplexml_load_file(drupal_get_path('module', 'ctrader_map') . '/inc/toronto_neighbourhoods.kml');
  $communities_array = array();
  $converted_kml_to_xml_string = '';
  foreach ($xml->Document->Folder->Placemark as $item) {
    $communities_array[] = (array) $item;
  }
  foreach ($communities_array as $item) {
    $coord_array = explode(';', $item['Polygon']->outerBoundaryIs->LinearRing->coordinates);
    $coord_xml = '<json_polygon>';
    foreach ($coord_array as $value) {
      $coord_pair = explode(',', $value);
      $coord_pair_string = '<element>' . trim($coord_pair[1]) . ',' . trim($coord_pair[0]) . '</element>';
      $coord_xml .= $coord_pair_string;
    }
    $coord_xml .= '</json_polygon>';
    $xml_string_item = '<element>' . $coord_xml . '<name>' . $item['name'] . '</name></element>';
    $converted_kml_to_xml_string .= $xml_string_item;
  }
  return $converted_kml_to_xml_string;
}


/**
 * Provides button for creating taxonomy tree in Neighbourhoods vocabulary.
 */
function _ctrader_map_region_taxonomy_form($form, &$form_state) {
  $form = array();
  $form['vocab_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Vocabulary machine name'),
    '#default_value' => 'neighbourhoods',
    '#size' => 42,
    '#maxlength' => 42,
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Start terms creating'),
//    '#disabled' => TRUE,
  );
  return $form;
}

/**
 * _ctrader_map_region_taxonomy_form submit function.
 */
function _ctrader_map_region_taxonomy_form_submit($form, &$form_state) {
  unset($_SESSION['neighbourhood_json']);
  _ctrader_map_taxonomy_create($form_state['values']['vocab_name']);
}


/**
 * Creates taxonomy term for each Toronto region.
 */
function _ctrader_map_taxonomy_create($vocab_machine_name) {
  $vid = taxonomy_vocabulary_machine_name_load($vocab_machine_name); //Neighbourhoods vocabulary.
  if ($vid == FALSE) {
    drupal_set_message(t('Vocabulary does not exist.'), 'error');
    return;
  }
  else {
    $vid = $vid->vid;
  }

  // Checks if vocabulary is empty.
  $check_vocab = taxonomy_get_tree($vid, 0, 1);
  if (!empty($check_vocab)) {
    drupal_set_message(t('Vocabulary is not empty.'), 'warning');
    drupal_set_message(t('You should clear Neighbourhoods vocabulary before creating new taxonomy tree.'), 'warning');
    return;
  }

  $condos_ca = simplexml_load_file(drupal_get_path('module', 'ctrader_map') . '/inc/condos-ca-01-06-16.xml');
  $elements = reset($condos_ca->tax);

  $grand_parent_ids = array();
  $parent_ids = array();
  foreach ($elements as $element) {
    if ($element->parent_id->__toString() == 0) {
      $grand_parent_ids[] = $element->id->__toString();
    }
  }
  foreach ($elements as $element) {
    if ($element->grandparent_id->__toString() !== 0 && in_array($element->parent_id->__toString(), $grand_parent_ids)) {
      $parent_ids[] = $element->id->__toString();
    }
  }

  // Creates first level terms.
  $tree = taxonomy_get_tree($vid, 0, NULL, TRUE);
  foreach ($elements as $key => $element) {
    if (in_array($element->id->__toString(), $grand_parent_ids)) {
      _prepare_taxonomy_term($element, $vid, $tree);
      unset($elements[$key]);
    }
  }

  // Creates second level terms.
  $tree = taxonomy_get_tree($vid, 0, NULL, TRUE);
  foreach ($elements as $key => $element) {
    if (in_array($element->id->__toString(), $parent_ids)) {
      _prepare_taxonomy_term($element, $vid, $tree);
      unset($elements[$key]);
    }
  }

  // Creates third level terms.
  $tree = taxonomy_get_tree($vid, 0, NULL, TRUE);
  foreach ($elements as $key => $element) {
    _prepare_taxonomy_term($element, $vid, $tree);
    unset($elements[$key]);
  }

  /**
   * $vid = taxonomy_vocabulary_machine_name_load('neighbourhoods'); //Neighbourhoods vocabulary.
   * $vid = $vid->vid;
   *
   * $select_list_condos_ca = array(
   * '1' => array(
   * 'Toronto' => array(
   * '590' => 'Downtown',
   * '597' => 'Midtown',
   * '593' => 'North York',
   * '596' => 'East End',
   * '598' => 'East York',
   * '595' => 'West End',
   * '594' => 'York Crosstown',
   * '592' => 'Etobicoke',
   * '591' => 'Scarborough',
   * )
   * ),
   * '2' => array(
   * 'Peel' => array(
   * '43' => 'Brampton',
   * '44' => 'Mississauga',
   * )
   * ),
   * '4' => array(
   * 'York Region' => array(
   * '54' => 'Aurora',
   * '49' => 'King',
   * '51' => 'Markham',
   * '55' => 'Newmarket',
   * '52' => 'Richmond Hill',
   * '50' => 'Vaughan',
   * )
   * ),
   * '3' => array(
   * 'Halton' => array(
   * '45' => 'Milton',
   * '46' => 'Burlington',
   * '47' => 'Halton Hills',
   * '48' => 'Oakville',
   * )
   * ),
   * '0' => array(
   * 'grandparent_0' => array(
   * '599' => 'Hamilton',
   * ),
   * ),
   * '5' => array(
   * 'grandparent_5' => array(
   * '59' => 'parent_59',
   * '60' => 'parent_60',
   * '61' => 'parent_61',
   * '62' => 'parent_62',
   * '63' => 'parent_63',
   * '64' => 'parent_64',
   * '65' => 'parent_65',
   * '66' => 'parent_66',
   * '67' => 'parent_67',
   * ),
   * ),
   * );
   *
   * // Creates main items for vocabulary.
   * foreach ($select_list_condos_ca as $grand_id => $grand_parent) {
   * $grand_pa_name = array_keys($grand_parent);
   * $grand_pa_name = array_shift($grand_pa_name);
   * $grand_pa = new stdClass();
   * $grand_pa->name = $grand_pa_name;
   * $grand_pa->vid = $vid;
   * $grand_pa->field_id[LANGUAGE_NONE][0]['value'] = $grand_id;
   * taxonomy_term_save($grand_pa);
   * $grand_parent_just_created = taxonomy_get_term_by_name($grand_pa_name);
   * $grand_parent_just_created = reset($grand_parent_just_created);
   * $grand_parent_id = $grand_parent_just_created->tid;
   * foreach ($grand_parent[$grand_pa_name] as $child_term_id => $child_term_name) {
   * $child_term = new stdClass();
   * $child_term->name = $child_term_name;
   * $child_term->vid = $vid;
   * $child_term->field_id[LANGUAGE_NONE][0]['value'] = $child_term_id;
   * $child_term->parent = array($grand_parent_id => $grand_parent_id);
   * taxonomy_term_save($child_term);
   * }
   * }
   *
   * $xml = simplexml_load_file(drupal_get_path('module', 'ctrader_map') . '/inc/condos-ca.xml');
   * $vocabulary_main_terms = taxonomy_get_tree($vid, 0, 2, TRUE);
   * foreach ($xml as $element) {
   * $term_name = $element->name->__toString();
   * $term_field_id_value = $element->id->__toString();
   * $xml_parent_id = $element->parent_id->__toString();
   *
   * //Creates json for geofield.
   * $is_polygon = TRUE;
   * $coordinates = array();
   * foreach ($element->json_polygon->element as $pair) {
   * $count_pair = count($pair);
   * if (!$count_pair) {
   * $point = explode(',', $pair);
   * $point = array_reverse($point);
   * $coordinates[] = $point;
   * }
   * // if multipolygon
   * else {
   * $is_polygon = FALSE;
   * $pre_coordinates = array();
   * foreach ((array) $pair->element as $value) {
   * $point = explode(',', $value);
   * $point = array_reverse($point);
   * $pre_coordinates[] = $point;
   * }
   * $coordinates[] = $pre_coordinates;
   * }
   * }
   * if ($is_polygon == TRUE && implode('_', $coordinates[0]) != implode('_', end($coordinates))) {
   * $coordinates[] = $coordinates[0];
   * }
   * $prepared = array(
   * 'id' => $element->id->__toString(),
   * 'type' => 'Feature',
   * 'properties' => array(
   * 'name' => !empty($element->name) ? $element->name->__toString() : 'Neighbourhood',
   * ),
   * 'geometry' => array(
   * 'type' => $is_polygon ? 'Polygon' : 'MultiPolygon',
   * 'coordinates' => array(
   * $coordinates,
   * ),
   * ),
   * );
   * $polygon_json = json_encode($prepared);
   *
   * // Finds which one of existed terms would be parent
   * // and create new parent term if not exist.
   * $parent_id = -1;
   * foreach ($vocabulary_main_terms as $parent_terms) {
   * if ($xml_parent_id == $parent_terms->field_id[LANGUAGE_NONE][0]['value']) {
   * $parent_id = $parent_terms->tid;
   * }
   * }
   * if ($parent_id == -1) {
   * $parent_term = new stdClass();
   * $parent_term->name = 'parent_' . $element->parent_id->__toString();
   * $parent_term->vid = $vid;
   * $parent_term->field_id[LANGUAGE_NONE][0]['value'] = $element->parent_id->__toString();
   * $parent_term->parent = array($element->grandparent_id->__toString() => $element->grandparent_id->__toString());
   * taxonomy_term_save($parent_term);
   * $parent_just_created = taxonomy_get_term_by_name('parent_' . $element->parent_id->__toString());
   * $parent_just_created = reset($parent_just_created);
   * $parent_id = $parent_just_created->tid;
   * $vocabulary_main_terms = taxonomy_get_tree($vid, 0, 2, TRUE);
   * }
   *
   * $term = new stdClass();
   * $term->name = $term_name;
   * $term->vid = $vid;
   * $term->field_community_geolocation[LANGUAGE_NONE][0]['geom'] = $polygon_json;
   * $term->field_community_geolocation[LANGUAGE_NONE][0]['input_format'] = 'json';
   * $term->field_id[LANGUAGE_NONE][0]['value'] = $term_field_id_value;
   * $term->parent = array($parent_id => $parent_id);
   * taxonomy_term_save($term);
   * }
   */
}


/**
 * Prepares term object and saves taxonomy term.
 *
 * @param $element - item from xml file.
 * @param $vid - Neighbourhoods vocabulary id.
 * @param $tree - tree of existed Neighbourhoods vocabulary taxonomy terms.
 */
function _prepare_taxonomy_term($element, $vid, $tree) {
  $term = new stdClass();
  $term->name = $element->name->__toString();
  $term->vid = $vid;
  $term->field_id[LANGUAGE_NONE][0]['value'] = $element->id->__toString();

  //Creates json for geofield.
  $is_polygon = TRUE;
  $coordinates = array();
  foreach ($element->json_polygon->element as $pair) {
    $count_pair = count($pair);
    if (!$count_pair) {
      $point = explode(',', $pair);
      $point = array_reverse($point);
      $coordinates[] = $point;
    }
    // if multipolygon
    else {
      $is_polygon = FALSE;
      $pre_coordinates = array();
      foreach ((array) $pair->element as $value) {
        $point = explode(',', $value);
        $point = array_reverse($point);
        $pre_coordinates[] = $point;
      }
      $coordinates[] = $pre_coordinates;
    }
  }
  if ($is_polygon == TRUE && implode('_', $coordinates[0]) != implode('_', end($coordinates))) {
    $coordinates[] = $coordinates[0];
  }
  $prepared = array(
    'id' => $element->id->__toString(),
    'type' => 'Feature',
    'properties' => array(
      'name' => !empty($element->name) ? $element->name->__toString() : 'Neighbourhood',
    ),
    'geometry' => array(
      'type' => $is_polygon ? 'Polygon' : 'MultiPolygon',
      'coordinates' => array(
        $coordinates,
      ),
    ),
  );
  $polygon_json = json_encode($prepared);
  $term->field_community_geolocation[LANGUAGE_NONE][0]['geom'] = $polygon_json;
  $term->field_community_geolocation[LANGUAGE_NONE][0]['input_format'] = 'json';

  // Added parents if exists.
  foreach ($tree as $value) {
    if (isset($value->field_id[LANGUAGE_NONE][0]['value']) && $value->field_id[LANGUAGE_NONE][0]['value'] == $element->parent_id->__toString()) {
      if (!empty($value->parents)) {
        $term->parent = $value->parents;
        $term->parent[$value->tid] = $value->tid;
        unset($term->parent[0]);
      }
      else {
        $term->parent[$value->tid] = $value->tid;
      }
    }
  }
  taxonomy_term_save($term);
}


/**
 * Callback function for page 'create-terms'.
 * @return string
 */
function _ctrader_map_create_terms_page_callback() {
//  $output['create_term_form'] = drupal_get_form('_ctrader_map_region_taxonomy_form');
  $output['update_json_form'] = drupal_get_form('_ctrader_map_update_neighbourhoods_json_form');
  $output['create_new_rebeccalang_term_form'] = drupal_get_form('_ctrader_map_create_new_community_terms_form');
  $output['json_geofield'] = drupal_get_form('_make_geofield_json_string');

  return $output;
}

/**
 * Creates new taxonomy terms using data from http://www.rebeccalaing.ca/index.php?p=2
 *
 * @param $form
 * @param $form_state
 */
function _ctrader_map_create_new_community_terms_form($form, &$form_state) {
  $form = array();
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create new terms (rebeccalaing.ca)'),
//    '#disabled' => TRUE,
  );
  return $form;
}

function _ctrader_map_create_new_community_terms_form_submit($form, &$form_state) {
  module_load_include('inc', 'ctrader_map', 'inc/ctrader_map_create_taxonomy');
  new_taxonomy_polygons();
}


/**
 * Form for setting 'ctrader_map_neighbourhood_json' variable in DB.
 *
 */
function _ctrader_map_update_neighbourhoods_json_form($form, &$form_state) {
  $form = array();
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update neighbourhoods json variable in DB'),
//    '#disabled' => TRUE,
  );
  return $form;
}

function _ctrader_map_update_neighbourhoods_json_form_submit($form, &$form_state) {
  if (isset($_SESSION['neighbourhoods_terms_polygons_data'])) {
    unset($_SESSION['neighbourhoods_terms_polygons_data']);
  }
  variable_del('ctrader_map_neighbourhood_json');
  _ctrader_map_prepare_neighbourhoods_json();
  drupal_set_message(t('\'ctrader_map_neighbourhood_json\' has been updated.'));
}


/**
 * Rewritten function from core.
 * @see taxonomy_get_tree
 *
 * Create a hierarchical representation of a vocabulary.
 *
 * @param $vid
 *   Which vocabulary to generate the tree for.
 * @param $parent
 *   The term ID under which to generate the tree. If 0, generate the tree
 *   for the entire vocabulary.
 * @param $max_depth
 *   The number of levels of the tree to return. Leave NULL to return all levels.
 * @param $load_entities
 *   If TRUE, a full entity load will occur on the term objects. Otherwise they
 *   are partial objects queried directly from the {taxonomy_term_data} table to
 *   save execution time and memory consumption when listing large numbers of
 *   terms. Defaults to FALSE.
 *
 * @return
 *   An array of all term objects in the tree. Each term object is extended
 *   to have "depth" and "parents" attributes in addition to its normal ones.
 *   Results are statically cached. Term objects will be partial or complete
 *   depending on the $load_entities parameter.
 */
function _ctrader_map_taxonomy_get_tree($vid, $parent = 0, $max_depth = NULL, $load_entities = FALSE) {
  $children = &drupal_static(__FUNCTION__, array());
  $parents = &drupal_static(__FUNCTION__ . ':parents', array());
  $terms = &drupal_static(__FUNCTION__ . ':terms', array());

  // We cache trees, so it's not CPU-intensive to call taxonomy_get_tree() on a
  // term and its children, too.
  if (!isset($children[$vid])) {
    $children[$vid] = array();
    $parents[$vid] = array();
    $terms[$vid] = array();

    $query = db_select('taxonomy_term_data', 't');
    $query->join('taxonomy_term_hierarchy', 'h', 'h.tid = t.tid');
    $result = $query
      ->addTag('translatable')
      ->addTag('term_access')
      ->fields('t')
      ->fields('h', array('parent'))
      ->condition('t.vid', $vid)
      ->orderBy('t.weight')
      ->orderBy('t.name')
      ->execute();

    foreach ($result as $term) {
      $children[$vid][$term->parent][] = $term->tid;
      $parents[$vid][$term->tid][] = $term->parent;
      $terms[$vid][$term->tid] = $term;
    }
  }

  // Load full entities, if necessary. The entity controller statically
  // caches the results.
  if ($load_entities) {
    $term_entities = taxonomy_term_load_multiple(array_keys($terms[$vid]));
  }

  $max_depth = (!isset($max_depth)) ? count($children[$vid]) : $max_depth;
  $tree = array();

  // Keeps track of the parents we have to process, the last entry is used
  // for the next processing step.
  $process_parents = array();
  $process_parents[] = $parent;

  // Loops over the parent terms and adds its children to the tree array.
  // Uses a loop instead of a recursion, because it's more efficient.
  while (count($process_parents)) {
    $parent = array_pop($process_parents);
    // The number of parents determines the current depth.
    $depth = count($process_parents);
    if ($max_depth > $depth && !empty($children[$vid][$parent])) {
      $has_children = FALSE;
      $child = current($children[$vid][$parent]);
      do {
        if (empty($child)) {
          break;
        }
        $term = $load_entities ? $term_entities[$child] : $terms[$vid][$child];
        if (isset($parents[$vid][$term->tid])) {
          // Clone the term so that the depth attribute remains correct
          // in the event of multiple parents.
          $term = clone $term;
        }
        $term->depth = $depth;
        unset($term->parent);
        $term->parents = $parents[$vid][$term->tid];
        $tree[$term->tid] = $term;
        if (!empty($children[$vid][$term->tid])) {
          $has_children = TRUE;

          // We have to continue with this parent later.
          $process_parents[] = $parent;
          // Use the current term as parent for the next iteration.
          $process_parents[] = $term->tid;

          // Reset pointers for child lists because we step in there more often
          // with multi parents.
          reset($children[$vid][$term->tid]);
          // Move pointer so that we get the correct term the next time.
          next($children[$vid][$parent]);
          break;
        }
      } while ($child = next($children[$vid][$parent]));

      if (!$has_children) {
        // We processed all terms in this hierarchy-level, reset pointer
        // so that this function works the next time it gets called.
        reset($children[$vid][$parent]);
      }
    }
  }

  return $tree;
}


/**
 * Callback function for page 'build-point-popup'.
 */
function _build_point_popup_page_callback() {
  global $user;
  if (isset($_POST['pointListingId'])) {
    $view_name = 'popup_content_for_point_on_map';
    $view_display = 'block_2';
    $view = views_embed_view($view_name, $view_display, $_POST['pointListingId']);
    if(in_array('administrator', $user->roles)) {
      $view .= '<p>' . l('edit', '/drealty_listing/' . $_POST['pointListingId'] . '/edit', array('attributes' => array('target'=>'_blank', 'class' => array('map-popup-edit')))) . '</p>';
    }
    drupal_json_output($view);
  }
}

/**
 * Makes geofield json from coordinates json array.
 * @param $form
 * @param $form_state
 * @return array
 */
function _make_geofield_json_string($form, &$form_state) {
  $form = array();

  $form['json_income'] = array(
    '#type' => 'textarea',
    '#title' => t('Paste json array here'),
    '#required' => TRUE,
    '#description' => 'example: ["49.282812039212075,-123.13491582870483","49.28054440937235,-123.13852071762085","49.27634481950684,-123.13419163227081","49.27910958971883,-123.12917053699493"]',
  );

  $form['json_outcome'] = array(
    '#type' => 'textarea',
    '#title' => t('Result'),
    '#value' => isset($form_state['values']['json_outcome']) ? $form_state['values']['json_outcome'] : '',
    '#attributes' => array(
      'readonly' => TRUE,
    ),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Make'),
//    '#disabled' => TRUE,
  );

  $form['resetbutton'] = array(
    '#markup' => '<button type="reset">Reset</button>',
    '#weight' => 1000
  );
  return $form;
}

/**
 * Submit function for _make_geofield_json_string form.
 * @param $form
 * @param $form_state
 */
function _make_geofield_json_string_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $json = json_decode($form_state['values']['json_income']);
  if ($json) {
    if ($json[0] != end($json)) {
//      array_pop($json);
      $json[] = $json[0];
    }
    foreach ($json as &$value) {
      $value = str_replace(', ', ',', $value);
      $value = explode(',', $value);
      $value = array_reverse($value);
    }
    $json_res = array('type' => 'Polygon', 'coordinates' => array($json),);
    $form_state['values']['json_outcome'] = json_encode($json_res);
  }
}

