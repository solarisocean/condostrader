<?php


/**
 * Implements hook_menu().
 */
function ctrader_map_menu() {
  $items = array();
  return $items;
}


/**
 * Implements hook_init().
 */
function ctrader_map_init() {
  $t_n_list = array(
    0 => 'Agincourt North',
    1 => 'Agincourt South-Malvern West',
    2 => 'Alderwood',
    3 => 'Annex',
    4 => 'Banbury-Don Mills',
    5 => 'Bathurst Manor',
    6 => 'Bay Street Corridor',
    7 => 'Bayview Village',
    8 => 'Bayview Woods-Steeles',
    9 => 'Bedford Park-Nortown',
    10 => 'Beechborough-Greenbrook',
    11 => 'Bendale',
    12 => 'Birchcliffe-Cliffside',
    13 => 'Black Creek',
    14 => 'Blake-Jones',
    15 => 'Briar Hill-Belgravia',
    16 => 'Bridle Path-Sunnybrook-York Mills',
    17 => 'Broadview North',
    18 => 'Brookhaven-Amesbury',
    19 => 'Cabbagetown-South St. James Town',
    20 => 'Caledonia-Fairbank',
    21 => 'Casa Loma',
    22 => 'Centennial Scarborough',
    23 => 'Church-Yonge Corridor',
    24 => 'Clairlea-Birchmount',
    25 => 'Clanton Park',
    26 => 'Cliffcrest',
    27 => 'Corso Italia-Davenport',
    28 => 'Crescent Town',
    29 => 'Danforth',
    30 => 'Danforth Village-East York',
    31 => 'Don Valley Village',
    32 => 'Dorset Park',
    33 => 'Dovercourt-Wallace Emerson-Junction',
    34 => 'Downsview-Roding-CFB',
    35 => 'Dufferin Grove',
    36 => 'East End-Danforth',
    37 => 'East York',
    38 => 'Edenbridge-Humber Valley',
    39 => 'Eglinton East',
    40 => 'Elms-Old Rexdale',
    41 => 'Englemount-Lawrence',
    42 => 'Eringate-Centennial-West Deane',
    43 => 'Etobicoke West Mall',
    44 => 'Flemingdon Park',
    45 => 'Forest Hill North',
    46 => 'Forest Hill South',
    47 => 'Glenfield-Jane Heights',
    48 => 'Greenwood-Coxwell',
    49 => 'Guildwood',
    50 => 'Henry Farm',
    51 => 'High Park North',
    52 => 'High Park-Swansea',
    53 => 'Highland Creek',
    54 => 'Hillcrest Village',
    55 => 'Humber Heights',
    56 => 'Humber Summit',
    57 => 'Humberlea-Pelmo Park W4',
    58 => 'Humberlea-Pelmo Park W5',
    59 => 'Humbermede',
    60 => 'Humewood-Cedarvale',
    61 => 'Ionview',
    62 => 'Islington-City Centre West',
    63 => 'Junction Area',
    64 => 'Keelesdale-Eglinton West',
    65 => 'Kennedy Park',
    66 => 'Kensington-Chinatown',
    67 => 'Kingsview Village-The Westway',
    68 => 'Kingsway South',
    69 => 'L\'Amoreaux',
    70 => 'Lambton Baby Point',
    71 => 'Lansing-Westgate',
    72 => 'Lawrence Park North',
    73 => 'Lawrence Park South',
    74 => 'Leaside',
    75 => 'Little Portugal',
    76 => 'Long Branch',
    77 => 'Malvern',
    78 => 'Maple Leaf',
    79 => 'Markland Wood',
    80 => 'Milliken',
    81 => 'Mimico',
    82 => 'Morningside',
    83 => 'Moss Park',
    84 => 'Mount Dennis',
    85 => 'Mount Olive-Silverstone-Jamestown',
    86 => 'Mount Pleasant East',
    87 => 'Mount Pleasant West',
    88 => 'New Toronto',
    89 => 'Newtonbrook East',
    90 => 'Newtonbrook West',
    91 => 'Niagara',
    92 => 'North Riverdale',
    93 => 'North St. James Town',
    94 => 'O\'Connor-Parkview',
    95 => 'Oakridge',
    96 => 'Oakwood-Vaughan',
    97 => 'Palmerston-Little Italy',
    98 => 'Parkwoods-Donalda',
    99 => 'Pleasant View',
    100 => 'Princess-Rosethorn',
    101 => 'Regent Park',
    102 => 'Rexdale-Kipling',
    103 => 'Rockcliffe-Smythe',
    104 => 'Roncesvalles',
    105 => 'Rosedale-Moore Park',
    106 => 'Rouge E10',
    107 => 'Rouge E11',
    108 => 'Runnymede-Bloor West Village',
    109 => 'Rustic',
    110 => 'Scarborough Village',
    111 => 'South Parkdale',
    112 => 'South Riverdale',
    113 => 'St. Andrew-Windfields',
    114 => 'Steeles',
    115 => 'Stonegate-Queensway',
    116 => 'Tam O\'Shanter-Sullivan',
    117 => 'The Beaches',
    118 => 'Thorncliffe Park',
    119 => 'Trinity-Bellwoods',
    120 => 'University',
    121 => 'Victoria Village',
    122 => 'Waterfront Communities C1',
    123 => 'Waterfront Communities C8',
    124 => 'West Hill',
    125 => 'West Humber-Clairville',
    126 => 'Westminster-Branson',
    127 => 'Weston',
    128 => 'Weston-Pellam Park',
    129 => 'Wexford-Maryvale',
    130 => 'Willowdale East',
    131 => 'Willowdale West',
    132 => 'Willowridge-Martingrove-Richview',
    133 => 'Woburn',
    134 => 'Woodbine Corridor',
    135 => 'Woodbine-Lumsden',
    136 => 'Wychwood',
    137 => 'Yonge-Eglinton',
    138 => 'Yonge-St. Clair',
    139 => 'York University Heights',
    140 => 'Yorkdale-Glen Park',
  );
//  $kml_to_xml = _ctrader_map_kml_to_xml();
}


/**
 * Implements hook_search_api_solr_query_alter().
 */
function ctrader_map_search_api_solr_query_alter(array &$call_args, SearchApiQueryInterface $query) {

  switch ($query->getOption('search id')) {
    case 'search_api_views:condo_search_page:page':
        $query_string = serialize($query);
        $_SESSION['query_from_view'] = $query_string;
//      setcookie('query_from_view_1', $query_string);
      break;
    case 'search_api_views:map:page':
      break;
  }

  $options = $query->getOptions();
  if (isset($options['query_label'])) {
    switch ($options['query_label']) {
      case 'search_on_map':
        $need_this_fields = array(
          'item_id',
          'score',
          'tm_field_addr__torcond',
          'tm_label',
          'locs_field_test_geofilld$latlon',
          'fs_field_lp_dol__torcond',
          'tm_field_community__torcond',
          'tm_field_community_code__torcond',
          'tm_field_community__torcond',
          'tm_field_ml_num__torcond',
        );
        $call_args['params']['fl'] = implode(',', $need_this_fields);
        break;
    }
  }
}


/**
 * Implements hook_block_info().
 */
function ctrader_map_block_info() {
  $blocks = array();
  $blocks['main_map'] = array(
    'info' => t('Custom block: Main Map'),
//    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function ctrader_map_block_view($delta = '') {
  $server = search_api_server_load('solr_server');

  if (isset($_SESSION['query_from_view'])) {
    $query = unserialize($_SESSION['query_from_view']);
    $query->setOption('limit', NULL);
    $query->setOption('query_label', 'search_on_map');
    $query->fields(array());
//    unset($_SESSION['query_from_view']);
  }
  else {
    $index = search_api_index_load('toronto_condo_index');
    $query = new SearchApiQuery($index);
    $query->keys();
    $query->fields(array());
//    $query->range(0, 150);
  }

  $solr = new SearchApiSolrService($server);
  $result = $solr->search($query);

  $condos_neighbourhood_names = array();
  $array_json = array();
  foreach ($result['results'] as $key => $item) {
    if (!empty($item['fields']['field_test_geofilld:latlon'])) {
      $coord = explode(',', $item['fields']['field_test_geofilld:latlon']);
    }
    else {
      // Toronto City default coordinates.
      $coord = array(
        '43.76',
        '-79.39'
      );
    }
    $popup_content = '';
    $popup_content .= 'id: ' . $item['fields']['search_api_id'] . '<br>MLS #: ' . $item['fields']['field_ml_num__torcond'][0];
    if (!empty($item['fields']['field_addr__torcond'][0])) {
      $popup_content .= '<br>' . $item['fields']['field_addr__torcond'][0];
    }
    if (!empty($item['fields']['field_lp_dol__torcond'])) {
      $popup_content .= '<br>$' . $item['fields']['field_lp_dol__torcond'];
    }
    if (!empty($item['fields']['field_community__torcond'][0])) {
      $popup_content .= '<br>' . $item['fields']['field_community__torcond'][0];
    }

    $prepared = array(
      'id' => $item['id'],
      'type' => 'Feature',
      'properties' => array(
        'name' => !empty($item['fields']['field_addr__torcond'][0]) ? $item['fields']['field_addr__torcond'][0] : 'Condo',
        'popupContent' => $popup_content,
      ),
      'geometry' => array(
        'type' => 'Point',
        'coordinates' => is_array($coord) ? array(
          (float) $coord[1],
          (float) $coord[0]
        ) : '',
      ),
    );
    $array_json[] = $prepared;

    if (!empty($item['fields']['field_community__torcond'][0]) && !in_array($item['fields']['field_community__torcond'][0], $condos_neighbourhood_names)) {
      $condos_neighbourhood_names[] = $item['fields']['field_community__torcond'][0];
    }
    sort($condos_neighbourhood_names);
  }
  drupal_add_js(array('condosMapData' => $array_json), 'setting');
  _ctrader_map_prepare_neighbourhoods_json($condos_neighbourhood_names, $array_json);

  $path = libraries_get_path('leaflet');
  drupal_add_js($path . '/leaflet-src.js');
  drupal_add_css($path . '/leaflet.css');

  $path = libraries_get_path('Leaflet.draw');
  drupal_add_js($path . '/dist/leaflet.draw.js');
  drupal_add_css($path . '/dist/leaflet.draw.css');

  // another draw tools.
//  $path = libraries_get_path('ConcaveHull');
//  drupal_add_js($path . '/dist/concavehull.js');
//  $path = libraries_get_path('d3');
//  drupal_add_js($path . '/d3.js');
//  $path = libraries_get_path('JsClipper');
//  drupal_add_js($path . '/clipper.js');
//  $path = libraries_get_path('Leaflet.FreeDraw');
//  drupal_add_js($path . '/dist/leaflet.freedraw-src.js');
//  $path = drupal_get_path('module', 'ctrader_map');
//  drupal_add_js($path . '/js/neighbourhood-json.js');


  $path = libraries_get_path('leaflet_markercluster');
  drupal_add_css($path . '/dist//dist/MarkerCluster.css');
  drupal_add_css($path . '/dist/MarkerCluster.Default.css');
  drupal_add_js($path . '/dist/leaflet.markercluster.js');


  drupal_add_js(drupal_get_path('module', 'ctrader_map') . '/js/custom_map.js');

  $block = array();
  $block['content'] = '<div id="mapid" style="height:600px;"></div>';
  $block['subject'] = 'Block with main map';
  return $block;
}


/**
 * Create json with Toronto neighbourhoods coordinates.
 */
function _ctrader_map_prepare_neighbourhoods_json($condos_neighbourhood_names = array(), $points_array = array()) {
  $regions_xml = simplexml_load_file(drupal_get_path('module', 'ctrader_map') . '/inc/neigh_2.xml');
  $neighbourhoods = array();
  foreach ($regions_xml as $item) {
    if (in_array($item->name, $condos_neighbourhood_names)) {
      $is_polygon = TRUE;
      $coordinates = array();
      foreach ($item->json_polygon->element as $pair) {
        $count_pair = count($pair);
        if (!$count_pair) {
          $point = explode(',', $pair);
          $point = array_reverse($point);
          $coordinates[] = $point;
        }
        // if multipolygon
        else {
          $is_polygon = FALSE;
          $pre_coordinates = array();
          foreach ((array) $pair->element as $value) {
            $point = explode(',', $value);
            $point = array_reverse($point);
            $pre_coordinates[] = $point;
          }
          $coordinates[] = $pre_coordinates;
        }
      }
      $polygon_popup_content = !empty($item->name) ? $item->name->__toString() : 'Neighbourhood';
      $prepared = array(
        'id' => $item->id->__toString(),
        'type' => 'Feature',
        'properties' => array(
          'name' => !empty($item->name) ? $item->name->__toString() : 'Neighbourhood',
          'popupContent' => $polygon_popup_content,
        ),
        'geometry' => array(
          'type' => $is_polygon ? 'Polygon' : 'MultiPolygon',
          'coordinates' => array(
            $coordinates,
          ),
        ),
      );
      $neighbourhoods[] = $prepared;
    }
  }
  drupal_add_js(array('neighbourhoodsMapData' => $neighbourhoods), 'setting');

  return $neighbourhoods;
}

function _ctrader_map_kml_to_xml() {
  $xml = simplexml_load_file(drupal_get_path('module', 'ctrader_map') . '/inc/toronto_neighbourhoods.kml');
  $communities_array = array();
  $converted_kml_to_xml_string = '';
  foreach ($xml->Document->Folder->Placemark as $item) {
    $communities_array[] = (array) $item;
  }
  foreach ($communities_array as $item) {
    $coord_array = explode(';', $item['Polygon']->outerBoundaryIs->LinearRing->coordinates);
    $coord_xml = '<json_polygon>';
    foreach ($coord_array as $value) {
      $coord_pair = explode(',', $value);
      $coord_pair_string = '<element>' . trim($coord_pair[1]) . ',' . trim($coord_pair[0]) . '</element>';
      $coord_xml .= $coord_pair_string;
    }
    $coord_xml .= '</json_polygon>';
    $xml_string_item = '<element>' . $coord_xml . '<name>' . $item['name'] . '</name></element>';
    $converted_kml_to_xml_string .= $xml_string_item;
  }
  return $converted_kml_to_xml_string;
}
